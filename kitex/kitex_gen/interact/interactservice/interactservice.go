// Code generated by Kitex v0.9.1. DO NOT EDIT.

package interactservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	interact "work/kitex_gen/interact"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"LikeAction": kitex.NewMethodInfo(
		likeActionHandler,
		newInteractServiceLikeActionArgs,
		newInteractServiceLikeActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"LikeList": kitex.NewMethodInfo(
		likeListHandler,
		newInteractServiceLikeListArgs,
		newInteractServiceLikeListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommentPublish": kitex.NewMethodInfo(
		commentPublishHandler,
		newInteractServiceCommentPublishArgs,
		newInteractServiceCommentPublishResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommentList": kitex.NewMethodInfo(
		commentListHandler,
		newInteractServiceCommentListArgs,
		newInteractServiceCommentListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CommentDelete": kitex.NewMethodInfo(
		commentDeleteHandler,
		newInteractServiceCommentDeleteArgs,
		newInteractServiceCommentDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoVisit": kitex.NewMethodInfo(
		videoVisitHandler,
		newInteractServiceVideoVisitArgs,
		newInteractServiceVideoVisitResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPopularList": kitex.NewMethodInfo(
		videoPopularListHandler,
		newInteractServiceVideoPopularListArgs,
		newInteractServiceVideoPopularListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteVideoInfo": kitex.NewMethodInfo(
		deleteVideoInfoHandler,
		newInteractServiceDeleteVideoInfoArgs,
		newInteractServiceDeleteVideoInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	interactServiceServiceInfo                = NewServiceInfo()
	interactServiceServiceInfoForClient       = NewServiceInfoForClient()
	interactServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return interactServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return interactServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return interactServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "InteractService"
	handlerType := (*interact.InteractService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "interact",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func likeActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceLikeActionArgs)
	realResult := result.(*interact.InteractServiceLikeActionResult)
	success, err := handler.(interact.InteractService).LikeAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceLikeActionArgs() interface{} {
	return interact.NewInteractServiceLikeActionArgs()
}

func newInteractServiceLikeActionResult() interface{} {
	return interact.NewInteractServiceLikeActionResult()
}

func likeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceLikeListArgs)
	realResult := result.(*interact.InteractServiceLikeListResult)
	success, err := handler.(interact.InteractService).LikeList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceLikeListArgs() interface{} {
	return interact.NewInteractServiceLikeListArgs()
}

func newInteractServiceLikeListResult() interface{} {
	return interact.NewInteractServiceLikeListResult()
}

func commentPublishHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceCommentPublishArgs)
	realResult := result.(*interact.InteractServiceCommentPublishResult)
	success, err := handler.(interact.InteractService).CommentPublish(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceCommentPublishArgs() interface{} {
	return interact.NewInteractServiceCommentPublishArgs()
}

func newInteractServiceCommentPublishResult() interface{} {
	return interact.NewInteractServiceCommentPublishResult()
}

func commentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceCommentListArgs)
	realResult := result.(*interact.InteractServiceCommentListResult)
	success, err := handler.(interact.InteractService).CommentList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceCommentListArgs() interface{} {
	return interact.NewInteractServiceCommentListArgs()
}

func newInteractServiceCommentListResult() interface{} {
	return interact.NewInteractServiceCommentListResult()
}

func commentDeleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceCommentDeleteArgs)
	realResult := result.(*interact.InteractServiceCommentDeleteResult)
	success, err := handler.(interact.InteractService).CommentDelete(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceCommentDeleteArgs() interface{} {
	return interact.NewInteractServiceCommentDeleteArgs()
}

func newInteractServiceCommentDeleteResult() interface{} {
	return interact.NewInteractServiceCommentDeleteResult()
}

func videoVisitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceVideoVisitArgs)
	realResult := result.(*interact.InteractServiceVideoVisitResult)
	success, err := handler.(interact.InteractService).VideoVisit(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceVideoVisitArgs() interface{} {
	return interact.NewInteractServiceVideoVisitArgs()
}

func newInteractServiceVideoVisitResult() interface{} {
	return interact.NewInteractServiceVideoVisitResult()
}

func videoPopularListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceVideoPopularListArgs)
	realResult := result.(*interact.InteractServiceVideoPopularListResult)
	success, err := handler.(interact.InteractService).VideoPopularList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceVideoPopularListArgs() interface{} {
	return interact.NewInteractServiceVideoPopularListArgs()
}

func newInteractServiceVideoPopularListResult() interface{} {
	return interact.NewInteractServiceVideoPopularListResult()
}

func deleteVideoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceDeleteVideoInfoArgs)
	realResult := result.(*interact.InteractServiceDeleteVideoInfoResult)
	success, err := handler.(interact.InteractService).DeleteVideoInfo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceDeleteVideoInfoArgs() interface{} {
	return interact.NewInteractServiceDeleteVideoInfoArgs()
}

func newInteractServiceDeleteVideoInfoResult() interface{} {
	return interact.NewInteractServiceDeleteVideoInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LikeAction(ctx context.Context, request *interact.LikeActionRequest) (r *interact.LikeActionResponse, err error) {
	var _args interact.InteractServiceLikeActionArgs
	_args.Request = request
	var _result interact.InteractServiceLikeActionResult
	if err = p.c.Call(ctx, "LikeAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LikeList(ctx context.Context, request *interact.LikeListRequest) (r *interact.LikeListResponse, err error) {
	var _args interact.InteractServiceLikeListArgs
	_args.Request = request
	var _result interact.InteractServiceLikeListResult
	if err = p.c.Call(ctx, "LikeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentPublish(ctx context.Context, request *interact.CommentPublishRequest) (r *interact.CommentPublishResponse, err error) {
	var _args interact.InteractServiceCommentPublishArgs
	_args.Request = request
	var _result interact.InteractServiceCommentPublishResult
	if err = p.c.Call(ctx, "CommentPublish", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentList(ctx context.Context, request *interact.CommentListRequest) (r *interact.CommentListResponse, err error) {
	var _args interact.InteractServiceCommentListArgs
	_args.Request = request
	var _result interact.InteractServiceCommentListResult
	if err = p.c.Call(ctx, "CommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentDelete(ctx context.Context, request *interact.CommentDeleteRequest) (r *interact.CommentDeleteResponse, err error) {
	var _args interact.InteractServiceCommentDeleteArgs
	_args.Request = request
	var _result interact.InteractServiceCommentDeleteResult
	if err = p.c.Call(ctx, "CommentDelete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoVisit(ctx context.Context, request *interact.VideoVisitRequest) (r *interact.VideoVisitResponse, err error) {
	var _args interact.InteractServiceVideoVisitArgs
	_args.Request = request
	var _result interact.InteractServiceVideoVisitResult
	if err = p.c.Call(ctx, "VideoVisit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPopularList(ctx context.Context, request *interact.VideoPopularListRequest) (r *interact.VideoPopularListResponse, err error) {
	var _args interact.InteractServiceVideoPopularListArgs
	_args.Request = request
	var _result interact.InteractServiceVideoPopularListResult
	if err = p.c.Call(ctx, "VideoPopularList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteVideoInfo(ctx context.Context, request *interact.DeleteVideoInfoRequest) (r *interact.DeleteVideoInfoResponse, err error) {
	var _args interact.InteractServiceDeleteVideoInfoArgs
	_args.Request = request
	var _result interact.InteractServiceDeleteVideoInfoResult
	if err = p.c.Call(ctx, "DeleteVideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
