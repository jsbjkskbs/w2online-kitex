// Code generated by Kitex v0.9.1. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	video "work/kitex_gen/video"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Feed(ctx context.Context, request *video.VideoFeedRequest, callOptions ...callopt.Option) (r *video.VideoFeedResponse, err error)
	VideoPublishStart(ctx context.Context, request *video.VideoPublishStartRequest, callOptions ...callopt.Option) (r *video.VideoPublishStartResponse, err error)
	VideoPublishUploading(ctx context.Context, request *video.VideoPublishUploadingRequest, callOptions ...callopt.Option) (r *video.VideoPublishUploadingResponse, err error)
	VideoPublishComplete(ctx context.Context, request *video.VideoPublishCompleteRequest, callOptions ...callopt.Option) (r *video.VideoPublishCompleteResponse, err error)
	VideoPublishCancle(ctx context.Context, request *video.VideoPublishCancleRequest, callOptions ...callopt.Option) (r *video.VideoPublishCancleResponse, err error)
	List(ctx context.Context, request *video.VideoListRequest, callOptions ...callopt.Option) (r *video.VideoListResponse, err error)
	Popular(ctx context.Context, request *video.VideoPopularRequest, callOptions ...callopt.Option) (r *video.VideoPopularResponse, err error)
	Search(ctx context.Context, request *video.VideoSearchRequest, callOptions ...callopt.Option) (r *video.VideoSearchResponse, err error)
	Info(ctx context.Context, request *video.VideoInfoRequest, callOptions ...callopt.Option) (r *video.VideoInfoResponse, err error)
	Delete(ctx context.Context, request *video.VideoDeleteRequest, callOptions ...callopt.Option) (r *video.VideoDeleteResponse, err error)
	IdList(ctx context.Context, request *video.VideoIdListRequest, callOptions ...callopt.Option) (r *video.VideoIdListResponse, err error)
	UpdateVisitCount(ctx context.Context, request *video.UpdateVisitCountRequest, callOptions ...callopt.Option) (r *video.UpdateVisitCountResponse, err error)
	GetVideoVisitCount(ctx context.Context, request *video.GetVideoVisitCountRequest, callOptions ...callopt.Option) (r *video.GetVideoVisitCountResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) Feed(ctx context.Context, request *video.VideoFeedRequest, callOptions ...callopt.Option) (r *video.VideoFeedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Feed(ctx, request)
}

func (p *kVideoServiceClient) VideoPublishStart(ctx context.Context, request *video.VideoPublishStartRequest, callOptions ...callopt.Option) (r *video.VideoPublishStartResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishStart(ctx, request)
}

func (p *kVideoServiceClient) VideoPublishUploading(ctx context.Context, request *video.VideoPublishUploadingRequest, callOptions ...callopt.Option) (r *video.VideoPublishUploadingResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishUploading(ctx, request)
}

func (p *kVideoServiceClient) VideoPublishComplete(ctx context.Context, request *video.VideoPublishCompleteRequest, callOptions ...callopt.Option) (r *video.VideoPublishCompleteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishComplete(ctx, request)
}

func (p *kVideoServiceClient) VideoPublishCancle(ctx context.Context, request *video.VideoPublishCancleRequest, callOptions ...callopt.Option) (r *video.VideoPublishCancleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.VideoPublishCancle(ctx, request)
}

func (p *kVideoServiceClient) List(ctx context.Context, request *video.VideoListRequest, callOptions ...callopt.Option) (r *video.VideoListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.List(ctx, request)
}

func (p *kVideoServiceClient) Popular(ctx context.Context, request *video.VideoPopularRequest, callOptions ...callopt.Option) (r *video.VideoPopularResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Popular(ctx, request)
}

func (p *kVideoServiceClient) Search(ctx context.Context, request *video.VideoSearchRequest, callOptions ...callopt.Option) (r *video.VideoSearchResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Search(ctx, request)
}

func (p *kVideoServiceClient) Info(ctx context.Context, request *video.VideoInfoRequest, callOptions ...callopt.Option) (r *video.VideoInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Info(ctx, request)
}

func (p *kVideoServiceClient) Delete(ctx context.Context, request *video.VideoDeleteRequest, callOptions ...callopt.Option) (r *video.VideoDeleteResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Delete(ctx, request)
}

func (p *kVideoServiceClient) IdList(ctx context.Context, request *video.VideoIdListRequest, callOptions ...callopt.Option) (r *video.VideoIdListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IdList(ctx, request)
}

func (p *kVideoServiceClient) UpdateVisitCount(ctx context.Context, request *video.UpdateVisitCountRequest, callOptions ...callopt.Option) (r *video.UpdateVisitCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateVisitCount(ctx, request)
}

func (p *kVideoServiceClient) GetVideoVisitCount(ctx context.Context, request *video.GetVideoVisitCountRequest, callOptions ...callopt.Option) (r *video.GetVideoVisitCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetVideoVisitCount(ctx, request)
}
