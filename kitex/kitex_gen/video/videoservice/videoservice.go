// Code generated by Kitex v0.9.1. DO NOT EDIT.

package videoservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	video "work/kitex_gen/video"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Feed": kitex.NewMethodInfo(
		feedHandler,
		newVideoServiceFeedArgs,
		newVideoServiceFeedResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPublishStart": kitex.NewMethodInfo(
		videoPublishStartHandler,
		newVideoServiceVideoPublishStartArgs,
		newVideoServiceVideoPublishStartResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPublishUploading": kitex.NewMethodInfo(
		videoPublishUploadingHandler,
		newVideoServiceVideoPublishUploadingArgs,
		newVideoServiceVideoPublishUploadingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPublishComplete": kitex.NewMethodInfo(
		videoPublishCompleteHandler,
		newVideoServiceVideoPublishCompleteArgs,
		newVideoServiceVideoPublishCompleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"VideoPublishCancle": kitex.NewMethodInfo(
		videoPublishCancleHandler,
		newVideoServiceVideoPublishCancleArgs,
		newVideoServiceVideoPublishCancleResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"List": kitex.NewMethodInfo(
		listHandler,
		newVideoServiceListArgs,
		newVideoServiceListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Popular": kitex.NewMethodInfo(
		popularHandler,
		newVideoServicePopularArgs,
		newVideoServicePopularResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Search": kitex.NewMethodInfo(
		searchHandler,
		newVideoServiceSearchArgs,
		newVideoServiceSearchResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Visit": kitex.NewMethodInfo(
		visitHandler,
		newVideoServiceVisitArgs,
		newVideoServiceVisitResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Info": kitex.NewMethodInfo(
		infoHandler,
		newVideoServiceInfoArgs,
		newVideoServiceInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Delete": kitex.NewMethodInfo(
		deleteHandler,
		newVideoServiceDeleteArgs,
		newVideoServiceDeleteResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	videoServiceServiceInfo                = NewServiceInfo()
	videoServiceServiceInfoForClient       = NewServiceInfoForClient()
	videoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return videoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "video",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFeedArgs)
	realResult := result.(*video.VideoServiceFeedResult)
	success, err := handler.(video.VideoService).Feed(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedArgs() interface{} {
	return video.NewVideoServiceFeedArgs()
}

func newVideoServiceFeedResult() interface{} {
	return video.NewVideoServiceFeedResult()
}

func videoPublishStartHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoPublishStartArgs)
	realResult := result.(*video.VideoServiceVideoPublishStartResult)
	success, err := handler.(video.VideoService).VideoPublishStart(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPublishStartArgs() interface{} {
	return video.NewVideoServiceVideoPublishStartArgs()
}

func newVideoServiceVideoPublishStartResult() interface{} {
	return video.NewVideoServiceVideoPublishStartResult()
}

func videoPublishUploadingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoPublishUploadingArgs)
	realResult := result.(*video.VideoServiceVideoPublishUploadingResult)
	success, err := handler.(video.VideoService).VideoPublishUploading(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPublishUploadingArgs() interface{} {
	return video.NewVideoServiceVideoPublishUploadingArgs()
}

func newVideoServiceVideoPublishUploadingResult() interface{} {
	return video.NewVideoServiceVideoPublishUploadingResult()
}

func videoPublishCompleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoPublishCompleteArgs)
	realResult := result.(*video.VideoServiceVideoPublishCompleteResult)
	success, err := handler.(video.VideoService).VideoPublishComplete(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPublishCompleteArgs() interface{} {
	return video.NewVideoServiceVideoPublishCompleteArgs()
}

func newVideoServiceVideoPublishCompleteResult() interface{} {
	return video.NewVideoServiceVideoPublishCompleteResult()
}

func videoPublishCancleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoPublishCancleArgs)
	realResult := result.(*video.VideoServiceVideoPublishCancleResult)
	success, err := handler.(video.VideoService).VideoPublishCancle(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoPublishCancleArgs() interface{} {
	return video.NewVideoServiceVideoPublishCancleArgs()
}

func newVideoServiceVideoPublishCancleResult() interface{} {
	return video.NewVideoServiceVideoPublishCancleResult()
}

func listHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceListArgs)
	realResult := result.(*video.VideoServiceListResult)
	success, err := handler.(video.VideoService).List(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceListArgs() interface{} {
	return video.NewVideoServiceListArgs()
}

func newVideoServiceListResult() interface{} {
	return video.NewVideoServiceListResult()
}

func popularHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePopularArgs)
	realResult := result.(*video.VideoServicePopularResult)
	success, err := handler.(video.VideoService).Popular(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePopularArgs() interface{} {
	return video.NewVideoServicePopularArgs()
}

func newVideoServicePopularResult() interface{} {
	return video.NewVideoServicePopularResult()
}

func searchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceSearchArgs)
	realResult := result.(*video.VideoServiceSearchResult)
	success, err := handler.(video.VideoService).Search(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceSearchArgs() interface{} {
	return video.NewVideoServiceSearchArgs()
}

func newVideoServiceSearchResult() interface{} {
	return video.NewVideoServiceSearchResult()
}

func visitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVisitArgs)
	realResult := result.(*video.VideoServiceVisitResult)
	success, err := handler.(video.VideoService).Visit(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVisitArgs() interface{} {
	return video.NewVideoServiceVisitArgs()
}

func newVideoServiceVisitResult() interface{} {
	return video.NewVideoServiceVisitResult()
}

func infoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceInfoArgs)
	realResult := result.(*video.VideoServiceInfoResult)
	success, err := handler.(video.VideoService).Info(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceInfoArgs() interface{} {
	return video.NewVideoServiceInfoArgs()
}

func newVideoServiceInfoResult() interface{} {
	return video.NewVideoServiceInfoResult()
}

func deleteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceDeleteArgs)
	realResult := result.(*video.VideoServiceDeleteResult)
	success, err := handler.(video.VideoService).Delete(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceDeleteArgs() interface{} {
	return video.NewVideoServiceDeleteArgs()
}

func newVideoServiceDeleteResult() interface{} {
	return video.NewVideoServiceDeleteResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, request *video.VideoFeedRequest) (r *video.VideoFeedResponse, err error) {
	var _args video.VideoServiceFeedArgs
	_args.Request = request
	var _result video.VideoServiceFeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishStart(ctx context.Context, request *video.VideoPublishStartRequest) (r *video.VideoPublishStartResponse, err error) {
	var _args video.VideoServiceVideoPublishStartArgs
	_args.Request = request
	var _result video.VideoServiceVideoPublishStartResult
	if err = p.c.Call(ctx, "VideoPublishStart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishUploading(ctx context.Context, request *video.VideoPublishUploadingRequest) (r *video.VideoPublishUploadingResponse, err error) {
	var _args video.VideoServiceVideoPublishUploadingArgs
	_args.Request = request
	var _result video.VideoServiceVideoPublishUploadingResult
	if err = p.c.Call(ctx, "VideoPublishUploading", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishComplete(ctx context.Context, request *video.VideoPublishCompleteRequest) (r *video.VideoPublishCompleteResponse, err error) {
	var _args video.VideoServiceVideoPublishCompleteArgs
	_args.Request = request
	var _result video.VideoServiceVideoPublishCompleteResult
	if err = p.c.Call(ctx, "VideoPublishComplete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoPublishCancle(ctx context.Context, request *video.VideoPublishCancleRequest) (r *video.VideoPublishCancleResponse, err error) {
	var _args video.VideoServiceVideoPublishCancleArgs
	_args.Request = request
	var _result video.VideoServiceVideoPublishCancleResult
	if err = p.c.Call(ctx, "VideoPublishCancle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) List(ctx context.Context, request *video.VideoListRequest) (r *video.VideoListResponse, err error) {
	var _args video.VideoServiceListArgs
	_args.Request = request
	var _result video.VideoServiceListResult
	if err = p.c.Call(ctx, "List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Popular(ctx context.Context, request *video.VideoPopularRequest) (r *video.VideoPopularResponse, err error) {
	var _args video.VideoServicePopularArgs
	_args.Request = request
	var _result video.VideoServicePopularResult
	if err = p.c.Call(ctx, "Popular", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Search(ctx context.Context, request *video.VideoSearchRequest) (r *video.VideoSearchResponse, err error) {
	var _args video.VideoServiceSearchArgs
	_args.Request = request
	var _result video.VideoServiceSearchResult
	if err = p.c.Call(ctx, "Search", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Visit(ctx context.Context, request *video.VideoVisitRequest) (r *video.VideoVisitResponse, err error) {
	var _args video.VideoServiceVisitArgs
	_args.Request = request
	var _result video.VideoServiceVisitResult
	if err = p.c.Call(ctx, "Visit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Info(ctx context.Context, request *video.VideoInfoRequest) (r *video.VideoInfoResponse, err error) {
	var _args video.VideoServiceInfoArgs
	_args.Request = request
	var _result video.VideoServiceInfoResult
	if err = p.c.Call(ctx, "Info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Delete(ctx context.Context, request *video.VideoDeleteRequest) (r *video.VideoDeleteResponse, err error) {
	var _args video.VideoServiceDeleteArgs
	_args.Request = request
	var _result video.VideoServiceDeleteResult
	if err = p.c.Call(ctx, "Delete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
