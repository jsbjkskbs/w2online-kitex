// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package video

import (
	"bytes"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
	"work/kitex_gen/base"
)

type VideoFeedRequest struct {
	LatestTime string `thrift:"latest_time,1" frugal:"1,default,string" json:"latest_time"`
}

func NewVideoFeedRequest() *VideoFeedRequest {
	return &VideoFeedRequest{}
}

func (p *VideoFeedRequest) InitDefault() {
	*p = VideoFeedRequest{}
}

func (p *VideoFeedRequest) GetLatestTime() (v string) {
	return p.LatestTime
}
func (p *VideoFeedRequest) SetLatestTime(val string) {
	p.LatestTime = val
}

var fieldIDToName_VideoFeedRequest = map[int16]string{
	1: "latest_time",
}

func (p *VideoFeedRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoFeedRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoFeedRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LatestTime = v
	}
	return nil
}

func (p *VideoFeedRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoFeedRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoFeedRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("latest_time", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LatestTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoFeedRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoFeedRequest(%+v)", *p)

}

func (p *VideoFeedRequest) DeepEqual(ano *VideoFeedRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LatestTime) {
		return false
	}
	return true
}

func (p *VideoFeedRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.LatestTime, src) != 0 {
		return false
	}
	return true
}

type VideoFeedResponseData struct {
	Items []*base.Video `thrift:"items,1" frugal:"1,default,list<base.Video>" json:"items"`
}

func NewVideoFeedResponseData() *VideoFeedResponseData {
	return &VideoFeedResponseData{}
}

func (p *VideoFeedResponseData) InitDefault() {
	*p = VideoFeedResponseData{}
}

func (p *VideoFeedResponseData) GetItems() (v []*base.Video) {
	return p.Items
}
func (p *VideoFeedResponseData) SetItems(val []*base.Video) {
	p.Items = val
}

var fieldIDToName_VideoFeedResponseData = map[int16]string{
	1: "items",
}

func (p *VideoFeedResponseData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoFeedResponseData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoFeedResponseData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*base.Video, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewVideo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *VideoFeedResponseData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoFeedResponseData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoFeedResponseData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoFeedResponseData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoFeedResponseData(%+v)", *p)

}

func (p *VideoFeedResponseData) DeepEqual(ano *VideoFeedResponseData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *VideoFeedResponseData) Field1DeepEqual(src []*base.Video) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type VideoFeedResponse struct {
	Base *base.Status           `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Data *VideoFeedResponseData `thrift:"data,2" frugal:"2,default,VideoFeedResponseData" json:"data"`
}

func NewVideoFeedResponse() *VideoFeedResponse {
	return &VideoFeedResponse{}
}

func (p *VideoFeedResponse) InitDefault() {
	*p = VideoFeedResponse{}
}

var VideoFeedResponse_Base_DEFAULT *base.Status

func (p *VideoFeedResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoFeedResponse_Base_DEFAULT
	}
	return p.Base
}

var VideoFeedResponse_Data_DEFAULT *VideoFeedResponseData

func (p *VideoFeedResponse) GetData() (v *VideoFeedResponseData) {
	if !p.IsSetData() {
		return VideoFeedResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *VideoFeedResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoFeedResponse) SetData(val *VideoFeedResponseData) {
	p.Data = val
}

var fieldIDToName_VideoFeedResponse = map[int16]string{
	1: "base",
	2: "data",
}

func (p *VideoFeedResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoFeedResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *VideoFeedResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoFeedResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoFeedResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *VideoFeedResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Data = NewVideoFeedResponseData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoFeedResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoFeedResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoFeedResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoFeedResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoFeedResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoFeedResponse(%+v)", *p)

}

func (p *VideoFeedResponse) DeepEqual(ano *VideoFeedResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *VideoFeedResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoFeedResponse) Field2DeepEqual(src *VideoFeedResponseData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type VideoPublishStartRequest struct {
	UserId           string `thrift:"user_id,1,required" frugal:"1,required,string" json:"user_id"`
	Title            string `thrift:"title,3,required" frugal:"3,required,string" json:"title"`
	Description      string `thrift:"description,4,required" frugal:"4,required,string" json:"description"`
	ChunkTotalNumber int64  `thrift:"chunk_total_number,5,required" frugal:"5,required,i64" json:"chunk_total_number"`
}

func NewVideoPublishStartRequest() *VideoPublishStartRequest {
	return &VideoPublishStartRequest{}
}

func (p *VideoPublishStartRequest) InitDefault() {
	*p = VideoPublishStartRequest{}
}

func (p *VideoPublishStartRequest) GetUserId() (v string) {
	return p.UserId
}

func (p *VideoPublishStartRequest) GetTitle() (v string) {
	return p.Title
}

func (p *VideoPublishStartRequest) GetDescription() (v string) {
	return p.Description
}

func (p *VideoPublishStartRequest) GetChunkTotalNumber() (v int64) {
	return p.ChunkTotalNumber
}
func (p *VideoPublishStartRequest) SetUserId(val string) {
	p.UserId = val
}
func (p *VideoPublishStartRequest) SetTitle(val string) {
	p.Title = val
}
func (p *VideoPublishStartRequest) SetDescription(val string) {
	p.Description = val
}
func (p *VideoPublishStartRequest) SetChunkTotalNumber(val int64) {
	p.ChunkTotalNumber = val
}

var fieldIDToName_VideoPublishStartRequest = map[int16]string{
	1: "user_id",
	3: "title",
	4: "description",
	5: "chunk_total_number",
}

func (p *VideoPublishStartRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false
	var issetTitle bool = false
	var issetDescription bool = false
	var issetChunkTotalNumber bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTitle = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDescription = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetChunkTotalNumber = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTitle {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDescription {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetChunkTotalNumber {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPublishStartRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_VideoPublishStartRequest[fieldId]))
}

func (p *VideoPublishStartRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}
func (p *VideoPublishStartRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Title = v
	}
	return nil
}
func (p *VideoPublishStartRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Description = v
	}
	return nil
}
func (p *VideoPublishStartRequest) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ChunkTotalNumber = v
	}
	return nil
}

func (p *VideoPublishStartRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishStartRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPublishStartRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPublishStartRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("title", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Title); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VideoPublishStartRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Description); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VideoPublishStartRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("chunk_total_number", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ChunkTotalNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VideoPublishStartRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishStartRequest(%+v)", *p)

}

func (p *VideoPublishStartRequest) DeepEqual(ano *VideoPublishStartRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field3DeepEqual(ano.Title) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.ChunkTotalNumber) {
		return false
	}
	return true
}

func (p *VideoPublishStartRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}
func (p *VideoPublishStartRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Title, src) != 0 {
		return false
	}
	return true
}
func (p *VideoPublishStartRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Description, src) != 0 {
		return false
	}
	return true
}
func (p *VideoPublishStartRequest) Field5DeepEqual(src int64) bool {

	if p.ChunkTotalNumber != src {
		return false
	}
	return true
}

type VideoPublishStartResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Uuid string       `thrift:"uuid,2" frugal:"2,default,string" json:"uuid"`
}

func NewVideoPublishStartResponse() *VideoPublishStartResponse {
	return &VideoPublishStartResponse{}
}

func (p *VideoPublishStartResponse) InitDefault() {
	*p = VideoPublishStartResponse{}
}

var VideoPublishStartResponse_Base_DEFAULT *base.Status

func (p *VideoPublishStartResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishStartResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoPublishStartResponse) GetUuid() (v string) {
	return p.Uuid
}
func (p *VideoPublishStartResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPublishStartResponse) SetUuid(val string) {
	p.Uuid = val
}

var fieldIDToName_VideoPublishStartResponse = map[int16]string{
	1: "base",
	2: "uuid",
}

func (p *VideoPublishStartResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishStartResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPublishStartResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoPublishStartResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *VideoPublishStartResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Uuid = v
	}
	return nil
}

func (p *VideoPublishStartResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishStartResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPublishStartResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPublishStartResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uuid", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoPublishStartResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishStartResponse(%+v)", *p)

}

func (p *VideoPublishStartResponse) DeepEqual(ano *VideoPublishStartResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uuid) {
		return false
	}
	return true
}

func (p *VideoPublishStartResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoPublishStartResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Uuid, src) != 0 {
		return false
	}
	return true
}

type VideoPublishUploadingRequest struct {
	UserId      string `thrift:"user_id,1,required" frugal:"1,required,string" json:"user_id"`
	Uuid        string `thrift:"uuid,2,required" frugal:"2,required,string" json:"uuid"`
	Data        []byte `thrift:"data,3,required" frugal:"3,required,binary" json:"data"`
	Md5         string `thrift:"md5,4,required" frugal:"4,required,string" json:"md5"`
	IsM3u8      bool   `thrift:"is_m3u8,5,required" frugal:"5,required,bool" json:"is_m3u8"`
	Filename    string `thrift:"filename,6,required" frugal:"6,required,string" json:"filename"`
	ChunkNumber int64  `thrift:"chunk_number,7,required" frugal:"7,required,i64" json:"chunk_number"`
}

func NewVideoPublishUploadingRequest() *VideoPublishUploadingRequest {
	return &VideoPublishUploadingRequest{}
}

func (p *VideoPublishUploadingRequest) InitDefault() {
	*p = VideoPublishUploadingRequest{}
}

func (p *VideoPublishUploadingRequest) GetUserId() (v string) {
	return p.UserId
}

func (p *VideoPublishUploadingRequest) GetUuid() (v string) {
	return p.Uuid
}

func (p *VideoPublishUploadingRequest) GetData() (v []byte) {
	return p.Data
}

func (p *VideoPublishUploadingRequest) GetMd5() (v string) {
	return p.Md5
}

func (p *VideoPublishUploadingRequest) GetIsM3u8() (v bool) {
	return p.IsM3u8
}

func (p *VideoPublishUploadingRequest) GetFilename() (v string) {
	return p.Filename
}

func (p *VideoPublishUploadingRequest) GetChunkNumber() (v int64) {
	return p.ChunkNumber
}
func (p *VideoPublishUploadingRequest) SetUserId(val string) {
	p.UserId = val
}
func (p *VideoPublishUploadingRequest) SetUuid(val string) {
	p.Uuid = val
}
func (p *VideoPublishUploadingRequest) SetData(val []byte) {
	p.Data = val
}
func (p *VideoPublishUploadingRequest) SetMd5(val string) {
	p.Md5 = val
}
func (p *VideoPublishUploadingRequest) SetIsM3u8(val bool) {
	p.IsM3u8 = val
}
func (p *VideoPublishUploadingRequest) SetFilename(val string) {
	p.Filename = val
}
func (p *VideoPublishUploadingRequest) SetChunkNumber(val int64) {
	p.ChunkNumber = val
}

var fieldIDToName_VideoPublishUploadingRequest = map[int16]string{
	1: "user_id",
	2: "uuid",
	3: "data",
	4: "md5",
	5: "is_m3u8",
	6: "filename",
	7: "chunk_number",
}

func (p *VideoPublishUploadingRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false
	var issetUuid bool = false
	var issetData bool = false
	var issetMd5 bool = false
	var issetIsM3u8 bool = false
	var issetFilename bool = false
	var issetChunkNumber bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUuid = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetData = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetMd5 = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetIsM3u8 = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilename = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetChunkNumber = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUuid {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetData {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetMd5 {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetIsM3u8 {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetFilename {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetChunkNumber {
		fieldId = 7
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPublishUploadingRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_VideoPublishUploadingRequest[fieldId]))
}

func (p *VideoPublishUploadingRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}
func (p *VideoPublishUploadingRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Uuid = v
	}
	return nil
}
func (p *VideoPublishUploadingRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Data = []byte(v)
	}
	return nil
}
func (p *VideoPublishUploadingRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Md5 = v
	}
	return nil
}
func (p *VideoPublishUploadingRequest) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsM3u8 = v
	}
	return nil
}
func (p *VideoPublishUploadingRequest) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Filename = v
	}
	return nil
}
func (p *VideoPublishUploadingRequest) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ChunkNumber = v
	}
	return nil
}

func (p *VideoPublishUploadingRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishUploadingRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPublishUploadingRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPublishUploadingRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uuid", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoPublishUploadingRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Data)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VideoPublishUploadingRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("md5", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Md5); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VideoPublishUploadingRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_m3u8", thrift.BOOL, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsM3u8); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VideoPublishUploadingRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filename", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filename); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *VideoPublishUploadingRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("chunk_number", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ChunkNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *VideoPublishUploadingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishUploadingRequest(%+v)", *p)

}

func (p *VideoPublishUploadingRequest) DeepEqual(ano *VideoPublishUploadingRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uuid) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field4DeepEqual(ano.Md5) {
		return false
	}
	if !p.Field5DeepEqual(ano.IsM3u8) {
		return false
	}
	if !p.Field6DeepEqual(ano.Filename) {
		return false
	}
	if !p.Field7DeepEqual(ano.ChunkNumber) {
		return false
	}
	return true
}

func (p *VideoPublishUploadingRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}
func (p *VideoPublishUploadingRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Uuid, src) != 0 {
		return false
	}
	return true
}
func (p *VideoPublishUploadingRequest) Field3DeepEqual(src []byte) bool {

	if bytes.Compare(p.Data, src) != 0 {
		return false
	}
	return true
}
func (p *VideoPublishUploadingRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Md5, src) != 0 {
		return false
	}
	return true
}
func (p *VideoPublishUploadingRequest) Field5DeepEqual(src bool) bool {

	if p.IsM3u8 != src {
		return false
	}
	return true
}
func (p *VideoPublishUploadingRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Filename, src) != 0 {
		return false
	}
	return true
}
func (p *VideoPublishUploadingRequest) Field7DeepEqual(src int64) bool {

	if p.ChunkNumber != src {
		return false
	}
	return true
}

type VideoPublishUploadingResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewVideoPublishUploadingResponse() *VideoPublishUploadingResponse {
	return &VideoPublishUploadingResponse{}
}

func (p *VideoPublishUploadingResponse) InitDefault() {
	*p = VideoPublishUploadingResponse{}
}

var VideoPublishUploadingResponse_Base_DEFAULT *base.Status

func (p *VideoPublishUploadingResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishUploadingResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *VideoPublishUploadingResponse) SetBase(val *base.Status) {
	p.Base = val
}

var fieldIDToName_VideoPublishUploadingResponse = map[int16]string{
	1: "base",
}

func (p *VideoPublishUploadingResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishUploadingResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPublishUploadingResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoPublishUploadingResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoPublishUploadingResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishUploadingResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPublishUploadingResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPublishUploadingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishUploadingResponse(%+v)", *p)

}

func (p *VideoPublishUploadingResponse) DeepEqual(ano *VideoPublishUploadingResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *VideoPublishUploadingResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type VideoPublishCompleteRequest struct {
	UserId string `thrift:"user_id,1,required" frugal:"1,required,string" json:"user_id"`
	Uuid   string `thrift:"uuid,2,required" frugal:"2,required,string" json:"uuid"`
}

func NewVideoPublishCompleteRequest() *VideoPublishCompleteRequest {
	return &VideoPublishCompleteRequest{}
}

func (p *VideoPublishCompleteRequest) InitDefault() {
	*p = VideoPublishCompleteRequest{}
}

func (p *VideoPublishCompleteRequest) GetUserId() (v string) {
	return p.UserId
}

func (p *VideoPublishCompleteRequest) GetUuid() (v string) {
	return p.Uuid
}
func (p *VideoPublishCompleteRequest) SetUserId(val string) {
	p.UserId = val
}
func (p *VideoPublishCompleteRequest) SetUuid(val string) {
	p.Uuid = val
}

var fieldIDToName_VideoPublishCompleteRequest = map[int16]string{
	1: "user_id",
	2: "uuid",
}

func (p *VideoPublishCompleteRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false
	var issetUuid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUuid = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUuid {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPublishCompleteRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_VideoPublishCompleteRequest[fieldId]))
}

func (p *VideoPublishCompleteRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}
func (p *VideoPublishCompleteRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Uuid = v
	}
	return nil
}

func (p *VideoPublishCompleteRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishCompleteRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPublishCompleteRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPublishCompleteRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uuid", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoPublishCompleteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCompleteRequest(%+v)", *p)

}

func (p *VideoPublishCompleteRequest) DeepEqual(ano *VideoPublishCompleteRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uuid) {
		return false
	}
	return true
}

func (p *VideoPublishCompleteRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}
func (p *VideoPublishCompleteRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Uuid, src) != 0 {
		return false
	}
	return true
}

type VideoPublishCompleteResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewVideoPublishCompleteResponse() *VideoPublishCompleteResponse {
	return &VideoPublishCompleteResponse{}
}

func (p *VideoPublishCompleteResponse) InitDefault() {
	*p = VideoPublishCompleteResponse{}
}

var VideoPublishCompleteResponse_Base_DEFAULT *base.Status

func (p *VideoPublishCompleteResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishCompleteResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *VideoPublishCompleteResponse) SetBase(val *base.Status) {
	p.Base = val
}

var fieldIDToName_VideoPublishCompleteResponse = map[int16]string{
	1: "base",
}

func (p *VideoPublishCompleteResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishCompleteResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPublishCompleteResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoPublishCompleteResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoPublishCompleteResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishCompleteResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPublishCompleteResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPublishCompleteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCompleteResponse(%+v)", *p)

}

func (p *VideoPublishCompleteResponse) DeepEqual(ano *VideoPublishCompleteResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *VideoPublishCompleteResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type VideoPublishCancleRequest struct {
	UserId string `thrift:"user_id,1,required" frugal:"1,required,string" json:"user_id"`
	Uuid   string `thrift:"uuid,2,required" frugal:"2,required,string" json:"uuid"`
}

func NewVideoPublishCancleRequest() *VideoPublishCancleRequest {
	return &VideoPublishCancleRequest{}
}

func (p *VideoPublishCancleRequest) InitDefault() {
	*p = VideoPublishCancleRequest{}
}

func (p *VideoPublishCancleRequest) GetUserId() (v string) {
	return p.UserId
}

func (p *VideoPublishCancleRequest) GetUuid() (v string) {
	return p.Uuid
}
func (p *VideoPublishCancleRequest) SetUserId(val string) {
	p.UserId = val
}
func (p *VideoPublishCancleRequest) SetUuid(val string) {
	p.Uuid = val
}

var fieldIDToName_VideoPublishCancleRequest = map[int16]string{
	1: "user_id",
	2: "uuid",
}

func (p *VideoPublishCancleRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false
	var issetUuid bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetUuid = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetUuid {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPublishCancleRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_VideoPublishCancleRequest[fieldId]))
}

func (p *VideoPublishCancleRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}
func (p *VideoPublishCancleRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Uuid = v
	}
	return nil
}

func (p *VideoPublishCancleRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishCancleRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPublishCancleRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPublishCancleRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("uuid", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Uuid); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoPublishCancleRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCancleRequest(%+v)", *p)

}

func (p *VideoPublishCancleRequest) DeepEqual(ano *VideoPublishCancleRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Uuid) {
		return false
	}
	return true
}

func (p *VideoPublishCancleRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}
func (p *VideoPublishCancleRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Uuid, src) != 0 {
		return false
	}
	return true
}

type VideoPublishCancleResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewVideoPublishCancleResponse() *VideoPublishCancleResponse {
	return &VideoPublishCancleResponse{}
}

func (p *VideoPublishCancleResponse) InitDefault() {
	*p = VideoPublishCancleResponse{}
}

var VideoPublishCancleResponse_Base_DEFAULT *base.Status

func (p *VideoPublishCancleResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPublishCancleResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *VideoPublishCancleResponse) SetBase(val *base.Status) {
	p.Base = val
}

var fieldIDToName_VideoPublishCancleResponse = map[int16]string{
	1: "base",
}

func (p *VideoPublishCancleResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPublishCancleResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPublishCancleResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoPublishCancleResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoPublishCancleResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishCancleResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPublishCancleResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPublishCancleResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPublishCancleResponse(%+v)", *p)

}

func (p *VideoPublishCancleResponse) DeepEqual(ano *VideoPublishCancleResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *VideoPublishCancleResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type VideoListRequest struct {
	UserId   string `thrift:"user_id,1,required" frugal:"1,required,string" json:"user_id"`
	PageNum  int64  `thrift:"page_num,2" frugal:"2,default,i64" json:"page_num"`
	PageSize int64  `thrift:"page_size,3" frugal:"3,default,i64" json:"page_size"`
}

func NewVideoListRequest() *VideoListRequest {
	return &VideoListRequest{}
}

func (p *VideoListRequest) InitDefault() {
	*p = VideoListRequest{}
}

func (p *VideoListRequest) GetUserId() (v string) {
	return p.UserId
}

func (p *VideoListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *VideoListRequest) SetUserId(val string) {
	p.UserId = val
}
func (p *VideoListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

var fieldIDToName_VideoListRequest = map[int16]string{
	1: "user_id",
	2: "page_num",
	3: "page_size",
}

func (p *VideoListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetUserId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetUserId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetUserId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_VideoListRequest[fieldId]))
}

func (p *VideoListRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UserId = v
	}
	return nil
}
func (p *VideoListRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}
func (p *VideoListRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *VideoListRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UserId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoListRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_size", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VideoListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoListRequest(%+v)", *p)

}

func (p *VideoListRequest) DeepEqual(ano *VideoListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserId) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoListRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.UserId, src) != 0 {
		return false
	}
	return true
}
func (p *VideoListRequest) Field2DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoListRequest) Field3DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

type VideoListResponseData struct {
	Data  []*base.Video `thrift:"data,1" frugal:"1,default,list<base.Video>" json:"data"`
	Total int64         `thrift:"total,2" frugal:"2,default,i64" json:"total"`
}

func NewVideoListResponseData() *VideoListResponseData {
	return &VideoListResponseData{}
}

func (p *VideoListResponseData) InitDefault() {
	*p = VideoListResponseData{}
}

func (p *VideoListResponseData) GetData() (v []*base.Video) {
	return p.Data
}

func (p *VideoListResponseData) GetTotal() (v int64) {
	return p.Total
}
func (p *VideoListResponseData) SetData(val []*base.Video) {
	p.Data = val
}
func (p *VideoListResponseData) SetTotal(val int64) {
	p.Total = val
}

var fieldIDToName_VideoListResponseData = map[int16]string{
	1: "data",
	2: "total",
}

func (p *VideoListResponseData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoListResponseData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoListResponseData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Data = make([]*base.Video, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewVideo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Data = append(p.Data, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *VideoListResponseData) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *VideoListResponseData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoListResponseData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoListResponseData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
		return err
	}
	for _, v := range p.Data {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoListResponseData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoListResponseData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoListResponseData(%+v)", *p)

}

func (p *VideoListResponseData) DeepEqual(ano *VideoListResponseData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Data) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *VideoListResponseData) Field1DeepEqual(src []*base.Video) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *VideoListResponseData) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

type VideoListResponse struct {
	Base *base.Status           `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Data *VideoListResponseData `thrift:"data,2" frugal:"2,default,VideoListResponseData" json:"data"`
}

func NewVideoListResponse() *VideoListResponse {
	return &VideoListResponse{}
}

func (p *VideoListResponse) InitDefault() {
	*p = VideoListResponse{}
}

var VideoListResponse_Base_DEFAULT *base.Status

func (p *VideoListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoListResponse_Base_DEFAULT
	}
	return p.Base
}

var VideoListResponse_Data_DEFAULT *VideoListResponseData

func (p *VideoListResponse) GetData() (v *VideoListResponseData) {
	if !p.IsSetData() {
		return VideoListResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *VideoListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoListResponse) SetData(val *VideoListResponseData) {
	p.Data = val
}

var fieldIDToName_VideoListResponse = map[int16]string{
	1: "base",
	2: "data",
}

func (p *VideoListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoListResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *VideoListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoListResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *VideoListResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Data = NewVideoListResponseData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoListResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoListResponse(%+v)", *p)

}

func (p *VideoListResponse) DeepEqual(ano *VideoListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *VideoListResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoListResponse) Field2DeepEqual(src *VideoListResponseData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type VideoPopularRequest struct {
	PageNum  int64 `thrift:"page_num,1" frugal:"1,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,2" frugal:"2,default,i64" json:"page_size"`
}

func NewVideoPopularRequest() *VideoPopularRequest {
	return &VideoPopularRequest{}
}

func (p *VideoPopularRequest) InitDefault() {
	*p = VideoPopularRequest{}
}

func (p *VideoPopularRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoPopularRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *VideoPopularRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoPopularRequest) SetPageSize(val int64) {
	p.PageSize = val
}

var fieldIDToName_VideoPopularRequest = map[int16]string{
	1: "page_num",
	2: "page_size",
}

func (p *VideoPopularRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPopularRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoPopularRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}
func (p *VideoPopularRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *VideoPopularRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPopularRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPopularRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPopularRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_size", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoPopularRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPopularRequest(%+v)", *p)

}

func (p *VideoPopularRequest) DeepEqual(ano *VideoPopularRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoPopularRequest) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoPopularRequest) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

type VideoPopularResponseData struct {
	Items []*base.Video `thrift:"items,1" frugal:"1,default,list<base.Video>" json:"items"`
}

func NewVideoPopularResponseData() *VideoPopularResponseData {
	return &VideoPopularResponseData{}
}

func (p *VideoPopularResponseData) InitDefault() {
	*p = VideoPopularResponseData{}
}

func (p *VideoPopularResponseData) GetItems() (v []*base.Video) {
	return p.Items
}
func (p *VideoPopularResponseData) SetItems(val []*base.Video) {
	p.Items = val
}

var fieldIDToName_VideoPopularResponseData = map[int16]string{
	1: "items",
}

func (p *VideoPopularResponseData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPopularResponseData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoPopularResponseData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*base.Video, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewVideo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *VideoPopularResponseData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPopularResponseData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPopularResponseData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPopularResponseData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPopularResponseData(%+v)", *p)

}

func (p *VideoPopularResponseData) DeepEqual(ano *VideoPopularResponseData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *VideoPopularResponseData) Field1DeepEqual(src []*base.Video) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type VideoPopularResponse struct {
	Base *base.Status              `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Data *VideoPopularResponseData `thrift:"data,2" frugal:"2,default,VideoPopularResponseData" json:"data"`
}

func NewVideoPopularResponse() *VideoPopularResponse {
	return &VideoPopularResponse{}
}

func (p *VideoPopularResponse) InitDefault() {
	*p = VideoPopularResponse{}
}

var VideoPopularResponse_Base_DEFAULT *base.Status

func (p *VideoPopularResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoPopularResponse_Base_DEFAULT
	}
	return p.Base
}

var VideoPopularResponse_Data_DEFAULT *VideoPopularResponseData

func (p *VideoPopularResponse) GetData() (v *VideoPopularResponseData) {
	if !p.IsSetData() {
		return VideoPopularResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *VideoPopularResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoPopularResponse) SetData(val *VideoPopularResponseData) {
	p.Data = val
}

var fieldIDToName_VideoPopularResponse = map[int16]string{
	1: "base",
	2: "data",
}

func (p *VideoPopularResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoPopularResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *VideoPopularResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoPopularResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoPopularResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *VideoPopularResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Data = NewVideoPopularResponseData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoPopularResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPopularResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoPopularResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoPopularResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoPopularResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoPopularResponse(%+v)", *p)

}

func (p *VideoPopularResponse) DeepEqual(ano *VideoPopularResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *VideoPopularResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoPopularResponse) Field2DeepEqual(src *VideoPopularResponseData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type VideoSearchRequest struct {
	Keywords string `thrift:"keywords,3" frugal:"3,default,string" json:"keywords"`
	PageNum  int64  `thrift:"page_num,4,required" frugal:"4,required,i64" json:"page_num"`
	PageSize int64  `thrift:"page_size,5,required" frugal:"5,required,i64" json:"page_size"`
	FromDate int64  `thrift:"from_date,6" frugal:"6,default,i64" json:"from_date"`
	ToDate   int64  `thrift:"to_date,7" frugal:"7,default,i64" json:"to_date"`
	Username string `thrift:"username,8" frugal:"8,default,string" json:"username"`
}

func NewVideoSearchRequest() *VideoSearchRequest {
	return &VideoSearchRequest{}
}

func (p *VideoSearchRequest) InitDefault() {
	*p = VideoSearchRequest{}
}

func (p *VideoSearchRequest) GetKeywords() (v string) {
	return p.Keywords
}

func (p *VideoSearchRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoSearchRequest) GetPageSize() (v int64) {
	return p.PageSize
}

func (p *VideoSearchRequest) GetFromDate() (v int64) {
	return p.FromDate
}

func (p *VideoSearchRequest) GetToDate() (v int64) {
	return p.ToDate
}

func (p *VideoSearchRequest) GetUsername() (v string) {
	return p.Username
}
func (p *VideoSearchRequest) SetKeywords(val string) {
	p.Keywords = val
}
func (p *VideoSearchRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoSearchRequest) SetPageSize(val int64) {
	p.PageSize = val
}
func (p *VideoSearchRequest) SetFromDate(val int64) {
	p.FromDate = val
}
func (p *VideoSearchRequest) SetToDate(val int64) {
	p.ToDate = val
}
func (p *VideoSearchRequest) SetUsername(val string) {
	p.Username = val
}

var fieldIDToName_VideoSearchRequest = map[int16]string{
	3: "keywords",
	4: "page_num",
	5: "page_size",
	6: "from_date",
	7: "to_date",
	8: "username",
}

func (p *VideoSearchRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageNum bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageNum = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageNum {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoSearchRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_VideoSearchRequest[fieldId]))
}

func (p *VideoSearchRequest) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Keywords = v
	}
	return nil
}
func (p *VideoSearchRequest) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}
func (p *VideoSearchRequest) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}
func (p *VideoSearchRequest) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.FromDate = v
	}
	return nil
}
func (p *VideoSearchRequest) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ToDate = v
	}
	return nil
}
func (p *VideoSearchRequest) ReadField8(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Username = v
	}
	return nil
}

func (p *VideoSearchRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoSearchRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoSearchRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("keywords", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Keywords); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VideoSearchRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *VideoSearchRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_size", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *VideoSearchRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("from_date", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.FromDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *VideoSearchRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("to_date", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ToDate); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *VideoSearchRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("username", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Username); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *VideoSearchRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchRequest(%+v)", *p)

}

func (p *VideoSearchRequest) DeepEqual(ano *VideoSearchRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field3DeepEqual(ano.Keywords) {
		return false
	}
	if !p.Field4DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field5DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field6DeepEqual(ano.FromDate) {
		return false
	}
	if !p.Field7DeepEqual(ano.ToDate) {
		return false
	}
	if !p.Field8DeepEqual(ano.Username) {
		return false
	}
	return true
}

func (p *VideoSearchRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Keywords, src) != 0 {
		return false
	}
	return true
}
func (p *VideoSearchRequest) Field4DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoSearchRequest) Field5DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}
func (p *VideoSearchRequest) Field6DeepEqual(src int64) bool {

	if p.FromDate != src {
		return false
	}
	return true
}
func (p *VideoSearchRequest) Field7DeepEqual(src int64) bool {

	if p.ToDate != src {
		return false
	}
	return true
}
func (p *VideoSearchRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Username, src) != 0 {
		return false
	}
	return true
}

type VideoSearchResponseData struct {
	Items []*base.Video `thrift:"items,1" frugal:"1,default,list<base.Video>" json:"items"`
	Total int64         `thrift:"total,2" frugal:"2,default,i64" json:"total"`
}

func NewVideoSearchResponseData() *VideoSearchResponseData {
	return &VideoSearchResponseData{}
}

func (p *VideoSearchResponseData) InitDefault() {
	*p = VideoSearchResponseData{}
}

func (p *VideoSearchResponseData) GetItems() (v []*base.Video) {
	return p.Items
}

func (p *VideoSearchResponseData) GetTotal() (v int64) {
	return p.Total
}
func (p *VideoSearchResponseData) SetItems(val []*base.Video) {
	p.Items = val
}
func (p *VideoSearchResponseData) SetTotal(val int64) {
	p.Total = val
}

var fieldIDToName_VideoSearchResponseData = map[int16]string{
	1: "items",
	2: "total",
}

func (p *VideoSearchResponseData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoSearchResponseData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoSearchResponseData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Items = make([]*base.Video, 0, size)
	for i := 0; i < size; i++ {
		_elem := base.NewVideo()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.Items = append(p.Items, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *VideoSearchResponseData) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Total = v
	}
	return nil
}

func (p *VideoSearchResponseData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoSearchResponseData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoSearchResponseData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
		return err
	}
	for _, v := range p.Items {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoSearchResponseData) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("total", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Total); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoSearchResponseData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchResponseData(%+v)", *p)

}

func (p *VideoSearchResponseData) DeepEqual(ano *VideoSearchResponseData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	return true
}

func (p *VideoSearchResponseData) Field1DeepEqual(src []*base.Video) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *VideoSearchResponseData) Field2DeepEqual(src int64) bool {

	if p.Total != src {
		return false
	}
	return true
}

type VideoSearchResponse struct {
	Base *base.Status             `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Data *VideoSearchResponseData `thrift:"data,2" frugal:"2,default,VideoSearchResponseData" json:"data"`
}

func NewVideoSearchResponse() *VideoSearchResponse {
	return &VideoSearchResponse{}
}

func (p *VideoSearchResponse) InitDefault() {
	*p = VideoSearchResponse{}
}

var VideoSearchResponse_Base_DEFAULT *base.Status

func (p *VideoSearchResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoSearchResponse_Base_DEFAULT
	}
	return p.Base
}

var VideoSearchResponse_Data_DEFAULT *VideoSearchResponseData

func (p *VideoSearchResponse) GetData() (v *VideoSearchResponseData) {
	if !p.IsSetData() {
		return VideoSearchResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *VideoSearchResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoSearchResponse) SetData(val *VideoSearchResponseData) {
	p.Data = val
}

var fieldIDToName_VideoSearchResponse = map[int16]string{
	1: "base",
	2: "data",
}

func (p *VideoSearchResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoSearchResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *VideoSearchResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoSearchResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoSearchResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *VideoSearchResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Data = NewVideoSearchResponseData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoSearchResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoSearchResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoSearchResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoSearchResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoSearchResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoSearchResponse(%+v)", *p)

}

func (p *VideoSearchResponse) DeepEqual(ano *VideoSearchResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *VideoSearchResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoSearchResponse) Field2DeepEqual(src *VideoSearchResponseData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type VideoInfoRequest struct {
	VideoId string `thrift:"video_id,1,required" frugal:"1,required,string" json:"video_id"`
}

func NewVideoInfoRequest() *VideoInfoRequest {
	return &VideoInfoRequest{}
}

func (p *VideoInfoRequest) InitDefault() {
	*p = VideoInfoRequest{}
}

func (p *VideoInfoRequest) GetVideoId() (v string) {
	return p.VideoId
}
func (p *VideoInfoRequest) SetVideoId(val string) {
	p.VideoId = val
}

var fieldIDToName_VideoInfoRequest = map[int16]string{
	1: "video_id",
}

func (p *VideoInfoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVideoId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVideoId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVideoId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_VideoInfoRequest[fieldId]))
}

func (p *VideoInfoRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *VideoInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoInfoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoInfoRequest(%+v)", *p)

}

func (p *VideoInfoRequest) DeepEqual(ano *VideoInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	return true
}

func (p *VideoInfoRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.VideoId, src) != 0 {
		return false
	}
	return true
}

type VideoInfoResponseData struct {
	Item *base.Video `thrift:"item,1" frugal:"1,default,base.Video" json:"item"`
}

func NewVideoInfoResponseData() *VideoInfoResponseData {
	return &VideoInfoResponseData{}
}

func (p *VideoInfoResponseData) InitDefault() {
	*p = VideoInfoResponseData{}
}

var VideoInfoResponseData_Item_DEFAULT *base.Video

func (p *VideoInfoResponseData) GetItem() (v *base.Video) {
	if !p.IsSetItem() {
		return VideoInfoResponseData_Item_DEFAULT
	}
	return p.Item
}
func (p *VideoInfoResponseData) SetItem(val *base.Video) {
	p.Item = val
}

var fieldIDToName_VideoInfoResponseData = map[int16]string{
	1: "item",
}

func (p *VideoInfoResponseData) IsSetItem() bool {
	return p.Item != nil
}

func (p *VideoInfoResponseData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoInfoResponseData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoInfoResponseData) ReadField1(iprot thrift.TProtocol) error {
	p.Item = base.NewVideo()
	if err := p.Item.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoInfoResponseData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoInfoResponseData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoInfoResponseData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Item.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoInfoResponseData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoInfoResponseData(%+v)", *p)

}

func (p *VideoInfoResponseData) DeepEqual(ano *VideoInfoResponseData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Item) {
		return false
	}
	return true
}

func (p *VideoInfoResponseData) Field1DeepEqual(src *base.Video) bool {

	if !p.Item.DeepEqual(src) {
		return false
	}
	return true
}

type VideoInfoResponse struct {
	Base *base.Status           `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	Data *VideoInfoResponseData `thrift:"data,2" frugal:"2,default,VideoInfoResponseData" json:"data"`
}

func NewVideoInfoResponse() *VideoInfoResponse {
	return &VideoInfoResponse{}
}

func (p *VideoInfoResponse) InitDefault() {
	*p = VideoInfoResponse{}
}

var VideoInfoResponse_Base_DEFAULT *base.Status

func (p *VideoInfoResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoInfoResponse_Base_DEFAULT
	}
	return p.Base
}

var VideoInfoResponse_Data_DEFAULT *VideoInfoResponseData

func (p *VideoInfoResponse) GetData() (v *VideoInfoResponseData) {
	if !p.IsSetData() {
		return VideoInfoResponse_Data_DEFAULT
	}
	return p.Data
}
func (p *VideoInfoResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoInfoResponse) SetData(val *VideoInfoResponseData) {
	p.Data = val
}

var fieldIDToName_VideoInfoResponse = map[int16]string{
	1: "base",
	2: "data",
}

func (p *VideoInfoResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoInfoResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *VideoInfoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *VideoInfoResponse) ReadField2(iprot thrift.TProtocol) error {
	p.Data = NewVideoInfoResponseData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoInfoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoInfoResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Data.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoInfoResponse(%+v)", *p)

}

func (p *VideoInfoResponse) DeepEqual(ano *VideoInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *VideoInfoResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoInfoResponse) Field2DeepEqual(src *VideoInfoResponseData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type VideoDeleteRequest struct {
	VideoId string `thrift:"video_id,1,required" frugal:"1,required,string" json:"video_id"`
}

func NewVideoDeleteRequest() *VideoDeleteRequest {
	return &VideoDeleteRequest{}
}

func (p *VideoDeleteRequest) InitDefault() {
	*p = VideoDeleteRequest{}
}

func (p *VideoDeleteRequest) GetVideoId() (v string) {
	return p.VideoId
}
func (p *VideoDeleteRequest) SetVideoId(val string) {
	p.VideoId = val
}

var fieldIDToName_VideoDeleteRequest = map[int16]string{
	1: "video_id",
}

func (p *VideoDeleteRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetVideoId bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetVideoId = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetVideoId {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoDeleteRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_VideoDeleteRequest[fieldId]))
}

func (p *VideoDeleteRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *VideoDeleteRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoDeleteRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoDeleteRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoDeleteRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoDeleteRequest(%+v)", *p)

}

func (p *VideoDeleteRequest) DeepEqual(ano *VideoDeleteRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	return true
}

func (p *VideoDeleteRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.VideoId, src) != 0 {
		return false
	}
	return true
}

type VideoDeleteResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewVideoDeleteResponse() *VideoDeleteResponse {
	return &VideoDeleteResponse{}
}

func (p *VideoDeleteResponse) InitDefault() {
	*p = VideoDeleteResponse{}
}

var VideoDeleteResponse_Base_DEFAULT *base.Status

func (p *VideoDeleteResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoDeleteResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *VideoDeleteResponse) SetBase(val *base.Status) {
	p.Base = val
}

var fieldIDToName_VideoDeleteResponse = map[int16]string{
	1: "base",
}

func (p *VideoDeleteResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoDeleteResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoDeleteResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoDeleteResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoDeleteResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoDeleteResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoDeleteResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoDeleteResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoDeleteResponse(%+v)", *p)

}

func (p *VideoDeleteResponse) DeepEqual(ano *VideoDeleteResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *VideoDeleteResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type VideoIdListRequest struct {
	PageNum  int64 `thrift:"page_num,1" frugal:"1,default,i64" json:"page_num"`
	PageSize int64 `thrift:"page_size,2" frugal:"2,default,i64" json:"page_size"`
}

func NewVideoIdListRequest() *VideoIdListRequest {
	return &VideoIdListRequest{}
}

func (p *VideoIdListRequest) InitDefault() {
	*p = VideoIdListRequest{}
}

func (p *VideoIdListRequest) GetPageNum() (v int64) {
	return p.PageNum
}

func (p *VideoIdListRequest) GetPageSize() (v int64) {
	return p.PageSize
}
func (p *VideoIdListRequest) SetPageNum(val int64) {
	p.PageNum = val
}
func (p *VideoIdListRequest) SetPageSize(val int64) {
	p.PageSize = val
}

var fieldIDToName_VideoIdListRequest = map[int16]string{
	1: "page_num",
	2: "page_size",
}

func (p *VideoIdListRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoIdListRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoIdListRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageNum = v
	}
	return nil
}
func (p *VideoIdListRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *VideoIdListRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoIdListRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoIdListRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_num", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageNum); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoIdListRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_size", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoIdListRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoIdListRequest(%+v)", *p)

}

func (p *VideoIdListRequest) DeepEqual(ano *VideoIdListRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageSize) {
		return false
	}
	return true
}

func (p *VideoIdListRequest) Field1DeepEqual(src int64) bool {

	if p.PageNum != src {
		return false
	}
	return true
}
func (p *VideoIdListRequest) Field2DeepEqual(src int64) bool {

	if p.PageSize != src {
		return false
	}
	return true
}

type VideoIdListResponse struct {
	Base  *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	IsEnd bool         `thrift:"is_end,2" frugal:"2,default,bool" json:"is_end"`
	List  []string     `thrift:"list,3" frugal:"3,default,list<string>" json:"list"`
}

func NewVideoIdListResponse() *VideoIdListResponse {
	return &VideoIdListResponse{}
}

func (p *VideoIdListResponse) InitDefault() {
	*p = VideoIdListResponse{}
}

var VideoIdListResponse_Base_DEFAULT *base.Status

func (p *VideoIdListResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return VideoIdListResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *VideoIdListResponse) GetIsEnd() (v bool) {
	return p.IsEnd
}

func (p *VideoIdListResponse) GetList() (v []string) {
	return p.List
}
func (p *VideoIdListResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *VideoIdListResponse) SetIsEnd(val bool) {
	p.IsEnd = val
}
func (p *VideoIdListResponse) SetList(val []string) {
	p.List = val
}

var fieldIDToName_VideoIdListResponse = map[int16]string{
	1: "base",
	2: "is_end",
	3: "list",
}

func (p *VideoIdListResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *VideoIdListResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoIdListResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoIdListResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *VideoIdListResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsEnd = v
	}
	return nil
}
func (p *VideoIdListResponse) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.List = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.List = append(p.List, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *VideoIdListResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoIdListResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoIdListResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoIdListResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_end", thrift.BOOL, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsEnd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *VideoIdListResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.List)); err != nil {
		return err
	}
	for _, v := range p.List {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VideoIdListResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoIdListResponse(%+v)", *p)

}

func (p *VideoIdListResponse) DeepEqual(ano *VideoIdListResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsEnd) {
		return false
	}
	if !p.Field3DeepEqual(ano.List) {
		return false
	}
	return true
}

func (p *VideoIdListResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *VideoIdListResponse) Field2DeepEqual(src bool) bool {

	if p.IsEnd != src {
		return false
	}
	return true
}
func (p *VideoIdListResponse) Field3DeepEqual(src []string) bool {

	if len(p.List) != len(src) {
		return false
	}
	for i, v := range p.List {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type UpdateVisitCountRequest struct {
	VideoId    string `thrift:"video_id,1" frugal:"1,default,string" json:"video_id"`
	VisitCount int64  `thrift:"visit_count,2" frugal:"2,default,i64" json:"visit_count"`
}

func NewUpdateVisitCountRequest() *UpdateVisitCountRequest {
	return &UpdateVisitCountRequest{}
}

func (p *UpdateVisitCountRequest) InitDefault() {
	*p = UpdateVisitCountRequest{}
}

func (p *UpdateVisitCountRequest) GetVideoId() (v string) {
	return p.VideoId
}

func (p *UpdateVisitCountRequest) GetVisitCount() (v int64) {
	return p.VisitCount
}
func (p *UpdateVisitCountRequest) SetVideoId(val string) {
	p.VideoId = val
}
func (p *UpdateVisitCountRequest) SetVisitCount(val int64) {
	p.VisitCount = val
}

var fieldIDToName_UpdateVisitCountRequest = map[int16]string{
	1: "video_id",
	2: "visit_count",
}

func (p *UpdateVisitCountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateVisitCountRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateVisitCountRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}
func (p *UpdateVisitCountRequest) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.VisitCount = v
	}
	return nil
}

func (p *UpdateVisitCountRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVisitCountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateVisitCountRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateVisitCountRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("visit_count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VisitCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *UpdateVisitCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVisitCountRequest(%+v)", *p)

}

func (p *UpdateVisitCountRequest) DeepEqual(ano *UpdateVisitCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	if !p.Field2DeepEqual(ano.VisitCount) {
		return false
	}
	return true
}

func (p *UpdateVisitCountRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.VideoId, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateVisitCountRequest) Field2DeepEqual(src int64) bool {

	if p.VisitCount != src {
		return false
	}
	return true
}

type UpdateVisitCountResponse struct {
	Base *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
}

func NewUpdateVisitCountResponse() *UpdateVisitCountResponse {
	return &UpdateVisitCountResponse{}
}

func (p *UpdateVisitCountResponse) InitDefault() {
	*p = UpdateVisitCountResponse{}
}

var UpdateVisitCountResponse_Base_DEFAULT *base.Status

func (p *UpdateVisitCountResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return UpdateVisitCountResponse_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateVisitCountResponse) SetBase(val *base.Status) {
	p.Base = val
}

var fieldIDToName_UpdateVisitCountResponse = map[int16]string{
	1: "base",
}

func (p *UpdateVisitCountResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateVisitCountResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateVisitCountResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateVisitCountResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *UpdateVisitCountResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVisitCountResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateVisitCountResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *UpdateVisitCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateVisitCountResponse(%+v)", *p)

}

func (p *UpdateVisitCountResponse) DeepEqual(ano *UpdateVisitCountResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateVisitCountResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetVideoVisitCountRequest struct {
	VideoId string `thrift:"video_id,1" frugal:"1,default,string" json:"video_id"`
}

func NewGetVideoVisitCountRequest() *GetVideoVisitCountRequest {
	return &GetVideoVisitCountRequest{}
}

func (p *GetVideoVisitCountRequest) InitDefault() {
	*p = GetVideoVisitCountRequest{}
}

func (p *GetVideoVisitCountRequest) GetVideoId() (v string) {
	return p.VideoId
}
func (p *GetVideoVisitCountRequest) SetVideoId(val string) {
	p.VideoId = val
}

var fieldIDToName_GetVideoVisitCountRequest = map[int16]string{
	1: "video_id",
}

func (p *GetVideoVisitCountRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetVideoVisitCountRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetVideoVisitCountRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.VideoId = v
	}
	return nil
}

func (p *GetVideoVisitCountRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVideoVisitCountRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetVideoVisitCountRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("video_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.VideoId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetVideoVisitCountRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoVisitCountRequest(%+v)", *p)

}

func (p *GetVideoVisitCountRequest) DeepEqual(ano *GetVideoVisitCountRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VideoId) {
		return false
	}
	return true
}

func (p *GetVideoVisitCountRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.VideoId, src) != 0 {
		return false
	}
	return true
}

type GetVideoVisitCountResponse struct {
	Base       *base.Status `thrift:"base,1" frugal:"1,default,base.Status" json:"base"`
	VisitCount int64        `thrift:"visit_count,2" frugal:"2,default,i64" json:"visit_count"`
}

func NewGetVideoVisitCountResponse() *GetVideoVisitCountResponse {
	return &GetVideoVisitCountResponse{}
}

func (p *GetVideoVisitCountResponse) InitDefault() {
	*p = GetVideoVisitCountResponse{}
}

var GetVideoVisitCountResponse_Base_DEFAULT *base.Status

func (p *GetVideoVisitCountResponse) GetBase() (v *base.Status) {
	if !p.IsSetBase() {
		return GetVideoVisitCountResponse_Base_DEFAULT
	}
	return p.Base
}

func (p *GetVideoVisitCountResponse) GetVisitCount() (v int64) {
	return p.VisitCount
}
func (p *GetVideoVisitCountResponse) SetBase(val *base.Status) {
	p.Base = val
}
func (p *GetVideoVisitCountResponse) SetVisitCount(val int64) {
	p.VisitCount = val
}

var fieldIDToName_GetVideoVisitCountResponse = map[int16]string{
	1: "base",
	2: "visit_count",
}

func (p *GetVideoVisitCountResponse) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetVideoVisitCountResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetVideoVisitCountResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetVideoVisitCountResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Base = base.NewStatus()
	if err := p.Base.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GetVideoVisitCountResponse) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.VisitCount = v
	}
	return nil
}

func (p *GetVideoVisitCountResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVideoVisitCountResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetVideoVisitCountResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Base.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetVideoVisitCountResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("visit_count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.VisitCount); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetVideoVisitCountResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetVideoVisitCountResponse(%+v)", *p)

}

func (p *GetVideoVisitCountResponse) DeepEqual(ano *GetVideoVisitCountResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Base) {
		return false
	}
	if !p.Field2DeepEqual(ano.VisitCount) {
		return false
	}
	return true
}

func (p *GetVideoVisitCountResponse) Field1DeepEqual(src *base.Status) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetVideoVisitCountResponse) Field2DeepEqual(src int64) bool {

	if p.VisitCount != src {
		return false
	}
	return true
}

type VideoService interface {
	Feed(ctx context.Context, request *VideoFeedRequest) (r *VideoFeedResponse, err error)

	VideoPublishStart(ctx context.Context, request *VideoPublishStartRequest) (r *VideoPublishStartResponse, err error)

	VideoPublishUploading(ctx context.Context, request *VideoPublishUploadingRequest) (r *VideoPublishUploadingResponse, err error)

	VideoPublishComplete(ctx context.Context, request *VideoPublishCompleteRequest) (r *VideoPublishCompleteResponse, err error)

	VideoPublishCancle(ctx context.Context, request *VideoPublishCancleRequest) (r *VideoPublishCancleResponse, err error)

	List(ctx context.Context, request *VideoListRequest) (r *VideoListResponse, err error)

	Popular(ctx context.Context, request *VideoPopularRequest) (r *VideoPopularResponse, err error)

	Search(ctx context.Context, request *VideoSearchRequest) (r *VideoSearchResponse, err error)

	Info(ctx context.Context, request *VideoInfoRequest) (r *VideoInfoResponse, err error)

	Delete(ctx context.Context, request *VideoDeleteRequest) (r *VideoDeleteResponse, err error)

	IdList(ctx context.Context, request *VideoIdListRequest) (r *VideoIdListResponse, err error)

	UpdateVisitCount(ctx context.Context, request *UpdateVisitCountRequest) (r *UpdateVisitCountResponse, err error)

	GetVideoVisitCount(ctx context.Context, request *GetVideoVisitCountRequest) (r *GetVideoVisitCountResponse, err error)
}

type VideoServiceClient struct {
	c thrift.TClient
}

func NewVideoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *VideoServiceClient {
	return &VideoServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewVideoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *VideoServiceClient {
	return &VideoServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewVideoServiceClient(c thrift.TClient) *VideoServiceClient {
	return &VideoServiceClient{
		c: c,
	}
}

func (p *VideoServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *VideoServiceClient) Feed(ctx context.Context, request *VideoFeedRequest) (r *VideoFeedResponse, err error) {
	var _args VideoServiceFeedArgs
	_args.Request = request
	var _result VideoServiceFeedResult
	if err = p.Client_().Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) VideoPublishStart(ctx context.Context, request *VideoPublishStartRequest) (r *VideoPublishStartResponse, err error) {
	var _args VideoServiceVideoPublishStartArgs
	_args.Request = request
	var _result VideoServiceVideoPublishStartResult
	if err = p.Client_().Call(ctx, "VideoPublishStart", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) VideoPublishUploading(ctx context.Context, request *VideoPublishUploadingRequest) (r *VideoPublishUploadingResponse, err error) {
	var _args VideoServiceVideoPublishUploadingArgs
	_args.Request = request
	var _result VideoServiceVideoPublishUploadingResult
	if err = p.Client_().Call(ctx, "VideoPublishUploading", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) VideoPublishComplete(ctx context.Context, request *VideoPublishCompleteRequest) (r *VideoPublishCompleteResponse, err error) {
	var _args VideoServiceVideoPublishCompleteArgs
	_args.Request = request
	var _result VideoServiceVideoPublishCompleteResult
	if err = p.Client_().Call(ctx, "VideoPublishComplete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) VideoPublishCancle(ctx context.Context, request *VideoPublishCancleRequest) (r *VideoPublishCancleResponse, err error) {
	var _args VideoServiceVideoPublishCancleArgs
	_args.Request = request
	var _result VideoServiceVideoPublishCancleResult
	if err = p.Client_().Call(ctx, "VideoPublishCancle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) List(ctx context.Context, request *VideoListRequest) (r *VideoListResponse, err error) {
	var _args VideoServiceListArgs
	_args.Request = request
	var _result VideoServiceListResult
	if err = p.Client_().Call(ctx, "List", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) Popular(ctx context.Context, request *VideoPopularRequest) (r *VideoPopularResponse, err error) {
	var _args VideoServicePopularArgs
	_args.Request = request
	var _result VideoServicePopularResult
	if err = p.Client_().Call(ctx, "Popular", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) Search(ctx context.Context, request *VideoSearchRequest) (r *VideoSearchResponse, err error) {
	var _args VideoServiceSearchArgs
	_args.Request = request
	var _result VideoServiceSearchResult
	if err = p.Client_().Call(ctx, "Search", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) Info(ctx context.Context, request *VideoInfoRequest) (r *VideoInfoResponse, err error) {
	var _args VideoServiceInfoArgs
	_args.Request = request
	var _result VideoServiceInfoResult
	if err = p.Client_().Call(ctx, "Info", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) Delete(ctx context.Context, request *VideoDeleteRequest) (r *VideoDeleteResponse, err error) {
	var _args VideoServiceDeleteArgs
	_args.Request = request
	var _result VideoServiceDeleteResult
	if err = p.Client_().Call(ctx, "Delete", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) IdList(ctx context.Context, request *VideoIdListRequest) (r *VideoIdListResponse, err error) {
	var _args VideoServiceIdListArgs
	_args.Request = request
	var _result VideoServiceIdListResult
	if err = p.Client_().Call(ctx, "IdList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) UpdateVisitCount(ctx context.Context, request *UpdateVisitCountRequest) (r *UpdateVisitCountResponse, err error) {
	var _args VideoServiceUpdateVisitCountArgs
	_args.Request = request
	var _result VideoServiceUpdateVisitCountResult
	if err = p.Client_().Call(ctx, "UpdateVisitCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *VideoServiceClient) GetVideoVisitCount(ctx context.Context, request *GetVideoVisitCountRequest) (r *GetVideoVisitCountResponse, err error) {
	var _args VideoServiceGetVideoVisitCountArgs
	_args.Request = request
	var _result VideoServiceGetVideoVisitCountResult
	if err = p.Client_().Call(ctx, "GetVideoVisitCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type VideoServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      VideoService
}

func (p *VideoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *VideoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *VideoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewVideoServiceProcessor(handler VideoService) *VideoServiceProcessor {
	self := &VideoServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Feed", &videoServiceProcessorFeed{handler: handler})
	self.AddToProcessorMap("VideoPublishStart", &videoServiceProcessorVideoPublishStart{handler: handler})
	self.AddToProcessorMap("VideoPublishUploading", &videoServiceProcessorVideoPublishUploading{handler: handler})
	self.AddToProcessorMap("VideoPublishComplete", &videoServiceProcessorVideoPublishComplete{handler: handler})
	self.AddToProcessorMap("VideoPublishCancle", &videoServiceProcessorVideoPublishCancle{handler: handler})
	self.AddToProcessorMap("List", &videoServiceProcessorList{handler: handler})
	self.AddToProcessorMap("Popular", &videoServiceProcessorPopular{handler: handler})
	self.AddToProcessorMap("Search", &videoServiceProcessorSearch{handler: handler})
	self.AddToProcessorMap("Info", &videoServiceProcessorInfo{handler: handler})
	self.AddToProcessorMap("Delete", &videoServiceProcessorDelete{handler: handler})
	self.AddToProcessorMap("IdList", &videoServiceProcessorIdList{handler: handler})
	self.AddToProcessorMap("UpdateVisitCount", &videoServiceProcessorUpdateVisitCount{handler: handler})
	self.AddToProcessorMap("GetVideoVisitCount", &videoServiceProcessorGetVideoVisitCount{handler: handler})
	return self
}
func (p *VideoServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type videoServiceProcessorFeed struct {
	handler VideoService
}

func (p *videoServiceProcessorFeed) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceFeedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Feed", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceFeedResult{}
	var retval *VideoFeedResponse
	if retval, err2 = p.handler.Feed(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Feed: "+err2.Error())
		oprot.WriteMessageBegin("Feed", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Feed", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorVideoPublishStart struct {
	handler VideoService
}

func (p *videoServiceProcessorVideoPublishStart) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceVideoPublishStartArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VideoPublishStart", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceVideoPublishStartResult{}
	var retval *VideoPublishStartResponse
	if retval, err2 = p.handler.VideoPublishStart(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VideoPublishStart: "+err2.Error())
		oprot.WriteMessageBegin("VideoPublishStart", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VideoPublishStart", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorVideoPublishUploading struct {
	handler VideoService
}

func (p *videoServiceProcessorVideoPublishUploading) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceVideoPublishUploadingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VideoPublishUploading", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceVideoPublishUploadingResult{}
	var retval *VideoPublishUploadingResponse
	if retval, err2 = p.handler.VideoPublishUploading(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VideoPublishUploading: "+err2.Error())
		oprot.WriteMessageBegin("VideoPublishUploading", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VideoPublishUploading", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorVideoPublishComplete struct {
	handler VideoService
}

func (p *videoServiceProcessorVideoPublishComplete) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceVideoPublishCompleteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VideoPublishComplete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceVideoPublishCompleteResult{}
	var retval *VideoPublishCompleteResponse
	if retval, err2 = p.handler.VideoPublishComplete(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VideoPublishComplete: "+err2.Error())
		oprot.WriteMessageBegin("VideoPublishComplete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VideoPublishComplete", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorVideoPublishCancle struct {
	handler VideoService
}

func (p *videoServiceProcessorVideoPublishCancle) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceVideoPublishCancleArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("VideoPublishCancle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceVideoPublishCancleResult{}
	var retval *VideoPublishCancleResponse
	if retval, err2 = p.handler.VideoPublishCancle(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing VideoPublishCancle: "+err2.Error())
		oprot.WriteMessageBegin("VideoPublishCancle", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("VideoPublishCancle", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorList struct {
	handler VideoService
}

func (p *videoServiceProcessorList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("List", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceListResult{}
	var retval *VideoListResponse
	if retval, err2 = p.handler.List(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing List: "+err2.Error())
		oprot.WriteMessageBegin("List", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("List", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorPopular struct {
	handler VideoService
}

func (p *videoServiceProcessorPopular) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServicePopularArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Popular", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServicePopularResult{}
	var retval *VideoPopularResponse
	if retval, err2 = p.handler.Popular(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Popular: "+err2.Error())
		oprot.WriteMessageBegin("Popular", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Popular", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorSearch struct {
	handler VideoService
}

func (p *videoServiceProcessorSearch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceSearchArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Search", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceSearchResult{}
	var retval *VideoSearchResponse
	if retval, err2 = p.handler.Search(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Search: "+err2.Error())
		oprot.WriteMessageBegin("Search", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Search", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorInfo struct {
	handler VideoService
}

func (p *videoServiceProcessorInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceInfoResult{}
	var retval *VideoInfoResponse
	if retval, err2 = p.handler.Info(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Info: "+err2.Error())
		oprot.WriteMessageBegin("Info", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Info", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorDelete struct {
	handler VideoService
}

func (p *videoServiceProcessorDelete) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceDeleteArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Delete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceDeleteResult{}
	var retval *VideoDeleteResponse
	if retval, err2 = p.handler.Delete(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Delete: "+err2.Error())
		oprot.WriteMessageBegin("Delete", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Delete", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorIdList struct {
	handler VideoService
}

func (p *videoServiceProcessorIdList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceIdListArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IdList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceIdListResult{}
	var retval *VideoIdListResponse
	if retval, err2 = p.handler.IdList(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IdList: "+err2.Error())
		oprot.WriteMessageBegin("IdList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("IdList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorUpdateVisitCount struct {
	handler VideoService
}

func (p *videoServiceProcessorUpdateVisitCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceUpdateVisitCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateVisitCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceUpdateVisitCountResult{}
	var retval *UpdateVisitCountResponse
	if retval, err2 = p.handler.UpdateVisitCount(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateVisitCount: "+err2.Error())
		oprot.WriteMessageBegin("UpdateVisitCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateVisitCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type videoServiceProcessorGetVideoVisitCount struct {
	handler VideoService
}

func (p *videoServiceProcessorGetVideoVisitCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := VideoServiceGetVideoVisitCountArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetVideoVisitCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := VideoServiceGetVideoVisitCountResult{}
	var retval *GetVideoVisitCountResponse
	if retval, err2 = p.handler.GetVideoVisitCount(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetVideoVisitCount: "+err2.Error())
		oprot.WriteMessageBegin("GetVideoVisitCount", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetVideoVisitCount", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type VideoServiceFeedArgs struct {
	Request *VideoFeedRequest `thrift:"request,1" frugal:"1,default,VideoFeedRequest" json:"request"`
}

func NewVideoServiceFeedArgs() *VideoServiceFeedArgs {
	return &VideoServiceFeedArgs{}
}

func (p *VideoServiceFeedArgs) InitDefault() {
	*p = VideoServiceFeedArgs{}
}

var VideoServiceFeedArgs_Request_DEFAULT *VideoFeedRequest

func (p *VideoServiceFeedArgs) GetRequest() (v *VideoFeedRequest) {
	if !p.IsSetRequest() {
		return VideoServiceFeedArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceFeedArgs) SetRequest(val *VideoFeedRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceFeedArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceFeedArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceFeedArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceFeedArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceFeedArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoFeedRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceFeedArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Feed_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceFeedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceFeedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceFeedArgs(%+v)", *p)

}

func (p *VideoServiceFeedArgs) DeepEqual(ano *VideoServiceFeedArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceFeedArgs) Field1DeepEqual(src *VideoFeedRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceFeedResult struct {
	Success *VideoFeedResponse `thrift:"success,0,optional" frugal:"0,optional,VideoFeedResponse" json:"success,omitempty"`
}

func NewVideoServiceFeedResult() *VideoServiceFeedResult {
	return &VideoServiceFeedResult{}
}

func (p *VideoServiceFeedResult) InitDefault() {
	*p = VideoServiceFeedResult{}
}

var VideoServiceFeedResult_Success_DEFAULT *VideoFeedResponse

func (p *VideoServiceFeedResult) GetSuccess() (v *VideoFeedResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceFeedResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceFeedResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoFeedResponse)
}

var fieldIDToName_VideoServiceFeedResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceFeedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceFeedResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceFeedResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceFeedResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoFeedResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceFeedResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Feed_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceFeedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceFeedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceFeedResult(%+v)", *p)

}

func (p *VideoServiceFeedResult) DeepEqual(ano *VideoServiceFeedResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceFeedResult) Field0DeepEqual(src *VideoFeedResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceVideoPublishStartArgs struct {
	Request *VideoPublishStartRequest `thrift:"request,1" frugal:"1,default,VideoPublishStartRequest" json:"request"`
}

func NewVideoServiceVideoPublishStartArgs() *VideoServiceVideoPublishStartArgs {
	return &VideoServiceVideoPublishStartArgs{}
}

func (p *VideoServiceVideoPublishStartArgs) InitDefault() {
	*p = VideoServiceVideoPublishStartArgs{}
}

var VideoServiceVideoPublishStartArgs_Request_DEFAULT *VideoPublishStartRequest

func (p *VideoServiceVideoPublishStartArgs) GetRequest() (v *VideoPublishStartRequest) {
	if !p.IsSetRequest() {
		return VideoServiceVideoPublishStartArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceVideoPublishStartArgs) SetRequest(val *VideoPublishStartRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceVideoPublishStartArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceVideoPublishStartArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceVideoPublishStartArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceVideoPublishStartArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishStartArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoPublishStartRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceVideoPublishStartArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishStart_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishStartArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceVideoPublishStartArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishStartArgs(%+v)", *p)

}

func (p *VideoServiceVideoPublishStartArgs) DeepEqual(ano *VideoServiceVideoPublishStartArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceVideoPublishStartArgs) Field1DeepEqual(src *VideoPublishStartRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceVideoPublishStartResult struct {
	Success *VideoPublishStartResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPublishStartResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishStartResult() *VideoServiceVideoPublishStartResult {
	return &VideoServiceVideoPublishStartResult{}
}

func (p *VideoServiceVideoPublishStartResult) InitDefault() {
	*p = VideoServiceVideoPublishStartResult{}
}

var VideoServiceVideoPublishStartResult_Success_DEFAULT *VideoPublishStartResponse

func (p *VideoServiceVideoPublishStartResult) GetSuccess() (v *VideoPublishStartResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishStartResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishStartResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishStartResponse)
}

var fieldIDToName_VideoServiceVideoPublishStartResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceVideoPublishStartResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishStartResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceVideoPublishStartResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishStartResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoPublishStartResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceVideoPublishStartResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishStart_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishStartResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceVideoPublishStartResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishStartResult(%+v)", *p)

}

func (p *VideoServiceVideoPublishStartResult) DeepEqual(ano *VideoServiceVideoPublishStartResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoPublishStartResult) Field0DeepEqual(src *VideoPublishStartResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceVideoPublishUploadingArgs struct {
	Request *VideoPublishUploadingRequest `thrift:"request,1" frugal:"1,default,VideoPublishUploadingRequest" json:"request"`
}

func NewVideoServiceVideoPublishUploadingArgs() *VideoServiceVideoPublishUploadingArgs {
	return &VideoServiceVideoPublishUploadingArgs{}
}

func (p *VideoServiceVideoPublishUploadingArgs) InitDefault() {
	*p = VideoServiceVideoPublishUploadingArgs{}
}

var VideoServiceVideoPublishUploadingArgs_Request_DEFAULT *VideoPublishUploadingRequest

func (p *VideoServiceVideoPublishUploadingArgs) GetRequest() (v *VideoPublishUploadingRequest) {
	if !p.IsSetRequest() {
		return VideoServiceVideoPublishUploadingArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceVideoPublishUploadingArgs) SetRequest(val *VideoPublishUploadingRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceVideoPublishUploadingArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceVideoPublishUploadingArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceVideoPublishUploadingArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceVideoPublishUploadingArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishUploadingArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoPublishUploadingRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceVideoPublishUploadingArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishUploading_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishUploadingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceVideoPublishUploadingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishUploadingArgs(%+v)", *p)

}

func (p *VideoServiceVideoPublishUploadingArgs) DeepEqual(ano *VideoServiceVideoPublishUploadingArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceVideoPublishUploadingArgs) Field1DeepEqual(src *VideoPublishUploadingRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceVideoPublishUploadingResult struct {
	Success *VideoPublishUploadingResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPublishUploadingResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishUploadingResult() *VideoServiceVideoPublishUploadingResult {
	return &VideoServiceVideoPublishUploadingResult{}
}

func (p *VideoServiceVideoPublishUploadingResult) InitDefault() {
	*p = VideoServiceVideoPublishUploadingResult{}
}

var VideoServiceVideoPublishUploadingResult_Success_DEFAULT *VideoPublishUploadingResponse

func (p *VideoServiceVideoPublishUploadingResult) GetSuccess() (v *VideoPublishUploadingResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishUploadingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishUploadingResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishUploadingResponse)
}

var fieldIDToName_VideoServiceVideoPublishUploadingResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceVideoPublishUploadingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishUploadingResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceVideoPublishUploadingResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishUploadingResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoPublishUploadingResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceVideoPublishUploadingResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishUploading_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishUploadingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceVideoPublishUploadingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishUploadingResult(%+v)", *p)

}

func (p *VideoServiceVideoPublishUploadingResult) DeepEqual(ano *VideoServiceVideoPublishUploadingResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoPublishUploadingResult) Field0DeepEqual(src *VideoPublishUploadingResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceVideoPublishCompleteArgs struct {
	Request *VideoPublishCompleteRequest `thrift:"request,1" frugal:"1,default,VideoPublishCompleteRequest" json:"request"`
}

func NewVideoServiceVideoPublishCompleteArgs() *VideoServiceVideoPublishCompleteArgs {
	return &VideoServiceVideoPublishCompleteArgs{}
}

func (p *VideoServiceVideoPublishCompleteArgs) InitDefault() {
	*p = VideoServiceVideoPublishCompleteArgs{}
}

var VideoServiceVideoPublishCompleteArgs_Request_DEFAULT *VideoPublishCompleteRequest

func (p *VideoServiceVideoPublishCompleteArgs) GetRequest() (v *VideoPublishCompleteRequest) {
	if !p.IsSetRequest() {
		return VideoServiceVideoPublishCompleteArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceVideoPublishCompleteArgs) SetRequest(val *VideoPublishCompleteRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceVideoPublishCompleteArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceVideoPublishCompleteArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceVideoPublishCompleteArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceVideoPublishCompleteArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishCompleteArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoPublishCompleteRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceVideoPublishCompleteArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishComplete_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishCompleteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceVideoPublishCompleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCompleteArgs(%+v)", *p)

}

func (p *VideoServiceVideoPublishCompleteArgs) DeepEqual(ano *VideoServiceVideoPublishCompleteArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceVideoPublishCompleteArgs) Field1DeepEqual(src *VideoPublishCompleteRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceVideoPublishCompleteResult struct {
	Success *VideoPublishCompleteResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPublishCompleteResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishCompleteResult() *VideoServiceVideoPublishCompleteResult {
	return &VideoServiceVideoPublishCompleteResult{}
}

func (p *VideoServiceVideoPublishCompleteResult) InitDefault() {
	*p = VideoServiceVideoPublishCompleteResult{}
}

var VideoServiceVideoPublishCompleteResult_Success_DEFAULT *VideoPublishCompleteResponse

func (p *VideoServiceVideoPublishCompleteResult) GetSuccess() (v *VideoPublishCompleteResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishCompleteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishCompleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishCompleteResponse)
}

var fieldIDToName_VideoServiceVideoPublishCompleteResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceVideoPublishCompleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishCompleteResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceVideoPublishCompleteResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishCompleteResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoPublishCompleteResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceVideoPublishCompleteResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishComplete_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishCompleteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceVideoPublishCompleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCompleteResult(%+v)", *p)

}

func (p *VideoServiceVideoPublishCompleteResult) DeepEqual(ano *VideoServiceVideoPublishCompleteResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoPublishCompleteResult) Field0DeepEqual(src *VideoPublishCompleteResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceVideoPublishCancleArgs struct {
	Request *VideoPublishCancleRequest `thrift:"request,1" frugal:"1,default,VideoPublishCancleRequest" json:"request"`
}

func NewVideoServiceVideoPublishCancleArgs() *VideoServiceVideoPublishCancleArgs {
	return &VideoServiceVideoPublishCancleArgs{}
}

func (p *VideoServiceVideoPublishCancleArgs) InitDefault() {
	*p = VideoServiceVideoPublishCancleArgs{}
}

var VideoServiceVideoPublishCancleArgs_Request_DEFAULT *VideoPublishCancleRequest

func (p *VideoServiceVideoPublishCancleArgs) GetRequest() (v *VideoPublishCancleRequest) {
	if !p.IsSetRequest() {
		return VideoServiceVideoPublishCancleArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceVideoPublishCancleArgs) SetRequest(val *VideoPublishCancleRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceVideoPublishCancleArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceVideoPublishCancleArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceVideoPublishCancleArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceVideoPublishCancleArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishCancleArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoPublishCancleRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceVideoPublishCancleArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishCancle_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishCancleArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceVideoPublishCancleArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCancleArgs(%+v)", *p)

}

func (p *VideoServiceVideoPublishCancleArgs) DeepEqual(ano *VideoServiceVideoPublishCancleArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceVideoPublishCancleArgs) Field1DeepEqual(src *VideoPublishCancleRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceVideoPublishCancleResult struct {
	Success *VideoPublishCancleResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPublishCancleResponse" json:"success,omitempty"`
}

func NewVideoServiceVideoPublishCancleResult() *VideoServiceVideoPublishCancleResult {
	return &VideoServiceVideoPublishCancleResult{}
}

func (p *VideoServiceVideoPublishCancleResult) InitDefault() {
	*p = VideoServiceVideoPublishCancleResult{}
}

var VideoServiceVideoPublishCancleResult_Success_DEFAULT *VideoPublishCancleResponse

func (p *VideoServiceVideoPublishCancleResult) GetSuccess() (v *VideoPublishCancleResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceVideoPublishCancleResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceVideoPublishCancleResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPublishCancleResponse)
}

var fieldIDToName_VideoServiceVideoPublishCancleResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceVideoPublishCancleResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceVideoPublishCancleResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceVideoPublishCancleResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishCancleResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoPublishCancleResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceVideoPublishCancleResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VideoPublishCancle_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceVideoPublishCancleResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceVideoPublishCancleResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceVideoPublishCancleResult(%+v)", *p)

}

func (p *VideoServiceVideoPublishCancleResult) DeepEqual(ano *VideoServiceVideoPublishCancleResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceVideoPublishCancleResult) Field0DeepEqual(src *VideoPublishCancleResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceListArgs struct {
	Request *VideoListRequest `thrift:"request,1" frugal:"1,default,VideoListRequest" json:"request"`
}

func NewVideoServiceListArgs() *VideoServiceListArgs {
	return &VideoServiceListArgs{}
}

func (p *VideoServiceListArgs) InitDefault() {
	*p = VideoServiceListArgs{}
}

var VideoServiceListArgs_Request_DEFAULT *VideoListRequest

func (p *VideoServiceListArgs) GetRequest() (v *VideoListRequest) {
	if !p.IsSetRequest() {
		return VideoServiceListArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceListArgs) SetRequest(val *VideoListRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceListArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoListRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("List_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceListArgs(%+v)", *p)

}

func (p *VideoServiceListArgs) DeepEqual(ano *VideoServiceListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceListArgs) Field1DeepEqual(src *VideoListRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceListResult struct {
	Success *VideoListResponse `thrift:"success,0,optional" frugal:"0,optional,VideoListResponse" json:"success,omitempty"`
}

func NewVideoServiceListResult() *VideoServiceListResult {
	return &VideoServiceListResult{}
}

func (p *VideoServiceListResult) InitDefault() {
	*p = VideoServiceListResult{}
}

var VideoServiceListResult_Success_DEFAULT *VideoListResponse

func (p *VideoServiceListResult) GetSuccess() (v *VideoListResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoListResponse)
}

var fieldIDToName_VideoServiceListResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoListResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("List_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceListResult(%+v)", *p)

}

func (p *VideoServiceListResult) DeepEqual(ano *VideoServiceListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceListResult) Field0DeepEqual(src *VideoListResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServicePopularArgs struct {
	Request *VideoPopularRequest `thrift:"request,1" frugal:"1,default,VideoPopularRequest" json:"request"`
}

func NewVideoServicePopularArgs() *VideoServicePopularArgs {
	return &VideoServicePopularArgs{}
}

func (p *VideoServicePopularArgs) InitDefault() {
	*p = VideoServicePopularArgs{}
}

var VideoServicePopularArgs_Request_DEFAULT *VideoPopularRequest

func (p *VideoServicePopularArgs) GetRequest() (v *VideoPopularRequest) {
	if !p.IsSetRequest() {
		return VideoServicePopularArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServicePopularArgs) SetRequest(val *VideoPopularRequest) {
	p.Request = val
}

var fieldIDToName_VideoServicePopularArgs = map[int16]string{
	1: "request",
}

func (p *VideoServicePopularArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServicePopularArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServicePopularArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServicePopularArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoPopularRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServicePopularArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Popular_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServicePopularArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServicePopularArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServicePopularArgs(%+v)", *p)

}

func (p *VideoServicePopularArgs) DeepEqual(ano *VideoServicePopularArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServicePopularArgs) Field1DeepEqual(src *VideoPopularRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServicePopularResult struct {
	Success *VideoPopularResponse `thrift:"success,0,optional" frugal:"0,optional,VideoPopularResponse" json:"success,omitempty"`
}

func NewVideoServicePopularResult() *VideoServicePopularResult {
	return &VideoServicePopularResult{}
}

func (p *VideoServicePopularResult) InitDefault() {
	*p = VideoServicePopularResult{}
}

var VideoServicePopularResult_Success_DEFAULT *VideoPopularResponse

func (p *VideoServicePopularResult) GetSuccess() (v *VideoPopularResponse) {
	if !p.IsSetSuccess() {
		return VideoServicePopularResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServicePopularResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoPopularResponse)
}

var fieldIDToName_VideoServicePopularResult = map[int16]string{
	0: "success",
}

func (p *VideoServicePopularResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServicePopularResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServicePopularResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServicePopularResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoPopularResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServicePopularResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Popular_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServicePopularResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServicePopularResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServicePopularResult(%+v)", *p)

}

func (p *VideoServicePopularResult) DeepEqual(ano *VideoServicePopularResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServicePopularResult) Field0DeepEqual(src *VideoPopularResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceSearchArgs struct {
	Request *VideoSearchRequest `thrift:"request,1" frugal:"1,default,VideoSearchRequest" json:"request"`
}

func NewVideoServiceSearchArgs() *VideoServiceSearchArgs {
	return &VideoServiceSearchArgs{}
}

func (p *VideoServiceSearchArgs) InitDefault() {
	*p = VideoServiceSearchArgs{}
}

var VideoServiceSearchArgs_Request_DEFAULT *VideoSearchRequest

func (p *VideoServiceSearchArgs) GetRequest() (v *VideoSearchRequest) {
	if !p.IsSetRequest() {
		return VideoServiceSearchArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceSearchArgs) SetRequest(val *VideoSearchRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceSearchArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceSearchArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceSearchArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceSearchArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceSearchArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoSearchRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceSearchArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Search_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceSearchArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceSearchArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSearchArgs(%+v)", *p)

}

func (p *VideoServiceSearchArgs) DeepEqual(ano *VideoServiceSearchArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceSearchArgs) Field1DeepEqual(src *VideoSearchRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceSearchResult struct {
	Success *VideoSearchResponse `thrift:"success,0,optional" frugal:"0,optional,VideoSearchResponse" json:"success,omitempty"`
}

func NewVideoServiceSearchResult() *VideoServiceSearchResult {
	return &VideoServiceSearchResult{}
}

func (p *VideoServiceSearchResult) InitDefault() {
	*p = VideoServiceSearchResult{}
}

var VideoServiceSearchResult_Success_DEFAULT *VideoSearchResponse

func (p *VideoServiceSearchResult) GetSuccess() (v *VideoSearchResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceSearchResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceSearchResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoSearchResponse)
}

var fieldIDToName_VideoServiceSearchResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceSearchResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceSearchResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceSearchResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceSearchResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoSearchResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceSearchResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Search_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceSearchResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceSearchResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceSearchResult(%+v)", *p)

}

func (p *VideoServiceSearchResult) DeepEqual(ano *VideoServiceSearchResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceSearchResult) Field0DeepEqual(src *VideoSearchResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceInfoArgs struct {
	Request *VideoInfoRequest `thrift:"request,1" frugal:"1,default,VideoInfoRequest" json:"request"`
}

func NewVideoServiceInfoArgs() *VideoServiceInfoArgs {
	return &VideoServiceInfoArgs{}
}

func (p *VideoServiceInfoArgs) InitDefault() {
	*p = VideoServiceInfoArgs{}
}

var VideoServiceInfoArgs_Request_DEFAULT *VideoInfoRequest

func (p *VideoServiceInfoArgs) GetRequest() (v *VideoInfoRequest) {
	if !p.IsSetRequest() {
		return VideoServiceInfoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceInfoArgs) SetRequest(val *VideoInfoRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceInfoArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceInfoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceInfoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoInfoRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Info_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceInfoArgs(%+v)", *p)

}

func (p *VideoServiceInfoArgs) DeepEqual(ano *VideoServiceInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceInfoArgs) Field1DeepEqual(src *VideoInfoRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceInfoResult struct {
	Success *VideoInfoResponse `thrift:"success,0,optional" frugal:"0,optional,VideoInfoResponse" json:"success,omitempty"`
}

func NewVideoServiceInfoResult() *VideoServiceInfoResult {
	return &VideoServiceInfoResult{}
}

func (p *VideoServiceInfoResult) InitDefault() {
	*p = VideoServiceInfoResult{}
}

var VideoServiceInfoResult_Success_DEFAULT *VideoInfoResponse

func (p *VideoServiceInfoResult) GetSuccess() (v *VideoInfoResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoInfoResponse)
}

var fieldIDToName_VideoServiceInfoResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceInfoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceInfoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoInfoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Info_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceInfoResult(%+v)", *p)

}

func (p *VideoServiceInfoResult) DeepEqual(ano *VideoServiceInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceInfoResult) Field0DeepEqual(src *VideoInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceDeleteArgs struct {
	Request *VideoDeleteRequest `thrift:"request,1" frugal:"1,default,VideoDeleteRequest" json:"request"`
}

func NewVideoServiceDeleteArgs() *VideoServiceDeleteArgs {
	return &VideoServiceDeleteArgs{}
}

func (p *VideoServiceDeleteArgs) InitDefault() {
	*p = VideoServiceDeleteArgs{}
}

var VideoServiceDeleteArgs_Request_DEFAULT *VideoDeleteRequest

func (p *VideoServiceDeleteArgs) GetRequest() (v *VideoDeleteRequest) {
	if !p.IsSetRequest() {
		return VideoServiceDeleteArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceDeleteArgs) SetRequest(val *VideoDeleteRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceDeleteArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceDeleteArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceDeleteArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceDeleteArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceDeleteArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoDeleteRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceDeleteArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Delete_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceDeleteArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceDeleteArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteArgs(%+v)", *p)

}

func (p *VideoServiceDeleteArgs) DeepEqual(ano *VideoServiceDeleteArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceDeleteArgs) Field1DeepEqual(src *VideoDeleteRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceDeleteResult struct {
	Success *VideoDeleteResponse `thrift:"success,0,optional" frugal:"0,optional,VideoDeleteResponse" json:"success,omitempty"`
}

func NewVideoServiceDeleteResult() *VideoServiceDeleteResult {
	return &VideoServiceDeleteResult{}
}

func (p *VideoServiceDeleteResult) InitDefault() {
	*p = VideoServiceDeleteResult{}
}

var VideoServiceDeleteResult_Success_DEFAULT *VideoDeleteResponse

func (p *VideoServiceDeleteResult) GetSuccess() (v *VideoDeleteResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceDeleteResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceDeleteResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoDeleteResponse)
}

var fieldIDToName_VideoServiceDeleteResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceDeleteResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceDeleteResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceDeleteResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceDeleteResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoDeleteResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceDeleteResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Delete_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceDeleteResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceDeleteResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceDeleteResult(%+v)", *p)

}

func (p *VideoServiceDeleteResult) DeepEqual(ano *VideoServiceDeleteResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceDeleteResult) Field0DeepEqual(src *VideoDeleteResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceIdListArgs struct {
	Request *VideoIdListRequest `thrift:"request,1" frugal:"1,default,VideoIdListRequest" json:"request"`
}

func NewVideoServiceIdListArgs() *VideoServiceIdListArgs {
	return &VideoServiceIdListArgs{}
}

func (p *VideoServiceIdListArgs) InitDefault() {
	*p = VideoServiceIdListArgs{}
}

var VideoServiceIdListArgs_Request_DEFAULT *VideoIdListRequest

func (p *VideoServiceIdListArgs) GetRequest() (v *VideoIdListRequest) {
	if !p.IsSetRequest() {
		return VideoServiceIdListArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceIdListArgs) SetRequest(val *VideoIdListRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceIdListArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceIdListArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceIdListArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceIdListArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceIdListArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewVideoIdListRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceIdListArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IdList_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceIdListArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceIdListArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceIdListArgs(%+v)", *p)

}

func (p *VideoServiceIdListArgs) DeepEqual(ano *VideoServiceIdListArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceIdListArgs) Field1DeepEqual(src *VideoIdListRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceIdListResult struct {
	Success *VideoIdListResponse `thrift:"success,0,optional" frugal:"0,optional,VideoIdListResponse" json:"success,omitempty"`
}

func NewVideoServiceIdListResult() *VideoServiceIdListResult {
	return &VideoServiceIdListResult{}
}

func (p *VideoServiceIdListResult) InitDefault() {
	*p = VideoServiceIdListResult{}
}

var VideoServiceIdListResult_Success_DEFAULT *VideoIdListResponse

func (p *VideoServiceIdListResult) GetSuccess() (v *VideoIdListResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceIdListResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceIdListResult) SetSuccess(x interface{}) {
	p.Success = x.(*VideoIdListResponse)
}

var fieldIDToName_VideoServiceIdListResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceIdListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceIdListResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceIdListResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceIdListResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewVideoIdListResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceIdListResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IdList_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceIdListResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceIdListResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceIdListResult(%+v)", *p)

}

func (p *VideoServiceIdListResult) DeepEqual(ano *VideoServiceIdListResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceIdListResult) Field0DeepEqual(src *VideoIdListResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceUpdateVisitCountArgs struct {
	Request *UpdateVisitCountRequest `thrift:"request,1" frugal:"1,default,UpdateVisitCountRequest" json:"request"`
}

func NewVideoServiceUpdateVisitCountArgs() *VideoServiceUpdateVisitCountArgs {
	return &VideoServiceUpdateVisitCountArgs{}
}

func (p *VideoServiceUpdateVisitCountArgs) InitDefault() {
	*p = VideoServiceUpdateVisitCountArgs{}
}

var VideoServiceUpdateVisitCountArgs_Request_DEFAULT *UpdateVisitCountRequest

func (p *VideoServiceUpdateVisitCountArgs) GetRequest() (v *UpdateVisitCountRequest) {
	if !p.IsSetRequest() {
		return VideoServiceUpdateVisitCountArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceUpdateVisitCountArgs) SetRequest(val *UpdateVisitCountRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceUpdateVisitCountArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceUpdateVisitCountArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceUpdateVisitCountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceUpdateVisitCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceUpdateVisitCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewUpdateVisitCountRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceUpdateVisitCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVisitCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceUpdateVisitCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceUpdateVisitCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVisitCountArgs(%+v)", *p)

}

func (p *VideoServiceUpdateVisitCountArgs) DeepEqual(ano *VideoServiceUpdateVisitCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceUpdateVisitCountArgs) Field1DeepEqual(src *UpdateVisitCountRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceUpdateVisitCountResult struct {
	Success *UpdateVisitCountResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateVisitCountResponse" json:"success,omitempty"`
}

func NewVideoServiceUpdateVisitCountResult() *VideoServiceUpdateVisitCountResult {
	return &VideoServiceUpdateVisitCountResult{}
}

func (p *VideoServiceUpdateVisitCountResult) InitDefault() {
	*p = VideoServiceUpdateVisitCountResult{}
}

var VideoServiceUpdateVisitCountResult_Success_DEFAULT *UpdateVisitCountResponse

func (p *VideoServiceUpdateVisitCountResult) GetSuccess() (v *UpdateVisitCountResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceUpdateVisitCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceUpdateVisitCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateVisitCountResponse)
}

var fieldIDToName_VideoServiceUpdateVisitCountResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceUpdateVisitCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceUpdateVisitCountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceUpdateVisitCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceUpdateVisitCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewUpdateVisitCountResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceUpdateVisitCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateVisitCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceUpdateVisitCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceUpdateVisitCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceUpdateVisitCountResult(%+v)", *p)

}

func (p *VideoServiceUpdateVisitCountResult) DeepEqual(ano *VideoServiceUpdateVisitCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceUpdateVisitCountResult) Field0DeepEqual(src *UpdateVisitCountResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceGetVideoVisitCountArgs struct {
	Request *GetVideoVisitCountRequest `thrift:"request,1" frugal:"1,default,GetVideoVisitCountRequest" json:"request"`
}

func NewVideoServiceGetVideoVisitCountArgs() *VideoServiceGetVideoVisitCountArgs {
	return &VideoServiceGetVideoVisitCountArgs{}
}

func (p *VideoServiceGetVideoVisitCountArgs) InitDefault() {
	*p = VideoServiceGetVideoVisitCountArgs{}
}

var VideoServiceGetVideoVisitCountArgs_Request_DEFAULT *GetVideoVisitCountRequest

func (p *VideoServiceGetVideoVisitCountArgs) GetRequest() (v *GetVideoVisitCountRequest) {
	if !p.IsSetRequest() {
		return VideoServiceGetVideoVisitCountArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *VideoServiceGetVideoVisitCountArgs) SetRequest(val *GetVideoVisitCountRequest) {
	p.Request = val
}

var fieldIDToName_VideoServiceGetVideoVisitCountArgs = map[int16]string{
	1: "request",
}

func (p *VideoServiceGetVideoVisitCountArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *VideoServiceGetVideoVisitCountArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceGetVideoVisitCountArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceGetVideoVisitCountArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = NewGetVideoVisitCountRequest()
	if err := p.Request.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceGetVideoVisitCountArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVideoVisitCount_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceGetVideoVisitCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *VideoServiceGetVideoVisitCountArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoVisitCountArgs(%+v)", *p)

}

func (p *VideoServiceGetVideoVisitCountArgs) DeepEqual(ano *VideoServiceGetVideoVisitCountArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *VideoServiceGetVideoVisitCountArgs) Field1DeepEqual(src *GetVideoVisitCountRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type VideoServiceGetVideoVisitCountResult struct {
	Success *GetVideoVisitCountResponse `thrift:"success,0,optional" frugal:"0,optional,GetVideoVisitCountResponse" json:"success,omitempty"`
}

func NewVideoServiceGetVideoVisitCountResult() *VideoServiceGetVideoVisitCountResult {
	return &VideoServiceGetVideoVisitCountResult{}
}

func (p *VideoServiceGetVideoVisitCountResult) InitDefault() {
	*p = VideoServiceGetVideoVisitCountResult{}
}

var VideoServiceGetVideoVisitCountResult_Success_DEFAULT *GetVideoVisitCountResponse

func (p *VideoServiceGetVideoVisitCountResult) GetSuccess() (v *GetVideoVisitCountResponse) {
	if !p.IsSetSuccess() {
		return VideoServiceGetVideoVisitCountResult_Success_DEFAULT
	}
	return p.Success
}
func (p *VideoServiceGetVideoVisitCountResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetVideoVisitCountResponse)
}

var fieldIDToName_VideoServiceGetVideoVisitCountResult = map[int16]string{
	0: "success",
}

func (p *VideoServiceGetVideoVisitCountResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *VideoServiceGetVideoVisitCountResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VideoServiceGetVideoVisitCountResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VideoServiceGetVideoVisitCountResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetVideoVisitCountResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *VideoServiceGetVideoVisitCountResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetVideoVisitCount_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VideoServiceGetVideoVisitCountResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *VideoServiceGetVideoVisitCountResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VideoServiceGetVideoVisitCountResult(%+v)", *p)

}

func (p *VideoServiceGetVideoVisitCountResult) DeepEqual(ano *VideoServiceGetVideoVisitCountResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *VideoServiceGetVideoVisitCountResult) Field0DeepEqual(src *GetVideoVisitCountResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
