// Code generated by Kitex v0.9.1. DO NOT EDIT.

package messageservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	message "work/kitex_gen/message"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"InsertMessage": kitex.NewMethodInfo(
		insertMessageHandler,
		newMessageServiceInsertMessageArgs,
		newMessageServiceInsertMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"PopMessage": kitex.NewMethodInfo(
		popMessageHandler,
		newMessageServicePopMessageArgs,
		newMessageServicePopMessageResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	messageServiceServiceInfo                = NewServiceInfo()
	messageServiceServiceInfoForClient       = NewServiceInfoForClient()
	messageServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return messageServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return messageServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return messageServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "MessageService"
	handlerType := (*message.MessageService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "message",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func insertMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServiceInsertMessageArgs)
	realResult := result.(*message.MessageServiceInsertMessageResult)
	success, err := handler.(message.MessageService).InsertMessage(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServiceInsertMessageArgs() interface{} {
	return message.NewMessageServiceInsertMessageArgs()
}

func newMessageServiceInsertMessageResult() interface{} {
	return message.NewMessageServiceInsertMessageResult()
}

func popMessageHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*message.MessageServicePopMessageArgs)
	realResult := result.(*message.MessageServicePopMessageResult)
	success, err := handler.(message.MessageService).PopMessage(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMessageServicePopMessageArgs() interface{} {
	return message.NewMessageServicePopMessageArgs()
}

func newMessageServicePopMessageResult() interface{} {
	return message.NewMessageServicePopMessageResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) InsertMessage(ctx context.Context, request *message.InsertMessageRequest) (r *message.InsertMessageResponse, err error) {
	var _args message.MessageServiceInsertMessageArgs
	_args.Request = request
	var _result message.MessageServiceInsertMessageResult
	if err = p.c.Call(ctx, "InsertMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PopMessage(ctx context.Context, request *message.PopMessageRequest) (r *message.PopMessageResponse, err error) {
	var _args message.MessageServicePopMessageArgs
	_args.Request = request
	var _result message.MessageServicePopMessageResult
	if err = p.c.Call(ctx, "PopMessage", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
