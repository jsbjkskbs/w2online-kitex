// Code generated by Kitex v0.9.1. DO NOT EDIT.

package relationservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	relation "work/kitex_gen/relation"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"RelationAction": kitex.NewMethodInfo(
		relationActionHandler,
		newRelationServiceRelationActionArgs,
		newRelationServiceRelationActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"FollowingList": kitex.NewMethodInfo(
		followingListHandler,
		newRelationServiceFollowingListArgs,
		newRelationServiceFollowingListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"FollowerList": kitex.NewMethodInfo(
		followerListHandler,
		newRelationServiceFollowerListArgs,
		newRelationServiceFollowerListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"FriendList": kitex.NewMethodInfo(
		friendListHandler,
		newRelationServiceFriendListArgs,
		newRelationServiceFriendListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	relationServiceServiceInfo                = NewServiceInfo()
	relationServiceServiceInfoForClient       = NewServiceInfoForClient()
	relationServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return relationServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return relationServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceRelationActionArgs)
	realResult := result.(*relation.RelationServiceRelationActionResult)
	success, err := handler.(relation.RelationService).RelationAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceRelationActionArgs() interface{} {
	return relation.NewRelationServiceRelationActionArgs()
}

func newRelationServiceRelationActionResult() interface{} {
	return relation.NewRelationServiceRelationActionResult()
}

func followingListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceFollowingListArgs)
	realResult := result.(*relation.RelationServiceFollowingListResult)
	success, err := handler.(relation.RelationService).FollowingList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceFollowingListArgs() interface{} {
	return relation.NewRelationServiceFollowingListArgs()
}

func newRelationServiceFollowingListResult() interface{} {
	return relation.NewRelationServiceFollowingListResult()
}

func followerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceFollowerListArgs)
	realResult := result.(*relation.RelationServiceFollowerListResult)
	success, err := handler.(relation.RelationService).FollowerList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceFollowerListArgs() interface{} {
	return relation.NewRelationServiceFollowerListArgs()
}

func newRelationServiceFollowerListResult() interface{} {
	return relation.NewRelationServiceFollowerListResult()
}

func friendListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*relation.RelationServiceFriendListArgs)
	realResult := result.(*relation.RelationServiceFriendListResult)
	success, err := handler.(relation.RelationService).FriendList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRelationServiceFriendListArgs() interface{} {
	return relation.NewRelationServiceFriendListArgs()
}

func newRelationServiceFriendListResult() interface{} {
	return relation.NewRelationServiceFriendListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, request *relation.RelationActionRequest) (r *relation.RelationActionResponse, err error) {
	var _args relation.RelationServiceRelationActionArgs
	_args.Request = request
	var _result relation.RelationServiceRelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowingList(ctx context.Context, request *relation.FollowingListRequest) (r *relation.FollowingListResponse, err error) {
	var _args relation.RelationServiceFollowingListArgs
	_args.Request = request
	var _result relation.RelationServiceFollowingListResult
	if err = p.c.Call(ctx, "FollowingList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FollowerList(ctx context.Context, request *relation.FollowerListRequest) (r *relation.FollowerListResponse, err error) {
	var _args relation.RelationServiceFollowerListArgs
	_args.Request = request
	var _result relation.RelationServiceFollowerListResult
	if err = p.c.Call(ctx, "FollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FriendList(ctx context.Context, request *relation.FriendListRequest) (r *relation.FriendListResponse, err error) {
	var _args relation.RelationServiceFriendListArgs
	_args.Request = request
	var _result relation.RelationServiceFriendListResult
	if err = p.c.Call(ctx, "FriendList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
